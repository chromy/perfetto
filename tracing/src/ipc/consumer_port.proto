/*
 * Copyright (C) 2017 The Android Open Source Project
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

syntax = "proto3";
option optimize_for = LITE_RUNTIME;

import "tracing/src/ipc/data_source_config.proto";

package perfetto;

// IPC interface definition for the consumer port of the tracing service.
service ConsumerPort {
  // Creates the ring buffers that will be used for the tracing session.
  // rpc CreateBuffers(CreateBuffersRequest) returns (CreateBuffersResponse) {}

  // Enables tracing for one or more data sources. At least one buffer must have
  // been previously created.
  rpc EnableTracing(EnableTracingRequest) returns (EnableTracingResponse) {}

  // Disables tracing for one or more data sources.
  rpc DisableTracing(DisableTracingRequest) returns (DisableTracingResponse) {}

  // Streams back the contents of one or more buffers.
  // TODO: add the ability to pass a FD and just let the service write into
  // that.
  rpc ReadBuffers(ReadBuffersRequest) returns (stream ReadBuffersResponse) {}

  // Destroys the buffers previously created. Note: all buffers are destroyed
  // implicitly if the Consumer disconnects.
  rpc FreeBuffers(FreeBuffersRequest) returns (FreeBuffersResponse) {}

  // TODO rpc ListDataSources(), for the UI.
}

// Arguments for rpc CreateBuffers().
// message CreateBuffersRequest {}
// message CreateBuffersResponse {}

// Arguments for rpc EnableTracing().
message EnableTracingRequest {
  message BufferConfig {
    uint32 size_kb = 2;

    enum OptimizeFor {
      // The log buffer is drained spordadically (typically only once after
      // DisableTracing()). This mode minimizes the Service overhead when moving
      // the pages from the Producer(s) shared staging buffers into the central
      // log buffer, at the cost of doing some extra memory moves to reorder and
      // reassemble the logged TracePacket(s).
      ONE_SHOT_READ = 0;

      // The log buffer is streamed continuously to the Consumer.
      // Advantages:
      // - It allows to use a smaller log buffer size, as the buffer is only
      //   needed to cover the pipe latency between Service and Consumer.
      // - It reduces the total cpu cost of tracing, as TracePackets are
      //   reshuffled only once when collected from the Producers shmem buffers.
      // Disadvantage:
      // - More scheduling intrusive, as will periodically wake up the Consumer
      //   to stream data.
      // TODO: Not implemented yet.
      // CONTINUOUS_STREAMING = 1;
    }
    OptimizeFor optimize_for = 3;

    enum FillPolicy {
      RING_BUFFER = 0;
      // TODO: not implemented yet.
      //STOP_WHEN_FULL = 1;
    }
    FillPolicy fill_policy = 4;
  }
  repeated BufferConfig buffers = 1;

  message DataSource {
    // Filters and data-source specific config. It contains also the unique name
    // of the data source, the one passed in the  DataSourceDescriptor when they
    // register on the service.
    proto.DataSourceConfig config = 1;

    // Optional. If multilple producer (~processes) expose the same data source
    // and |producer_name_filter| != "", the data source is enabled only for
    // producers which name match any of the producer_name_filter below.
    // This allow to enable a data source only on specific processes.
    repeated string producer_name_filter = 2;
  }
  repeated DataSource data_sources = 2;
}

message EnableTracingResponse {}

// Arguments for rpc DisableTracing().
message DisableTracingRequest {
  // When set, all active data source are disabled.
  bool disable_all = 1;

  // TODO: not supported yet.
  // repeated string data_source_name;
}

message DisableTracingResponse {}

// Arguments for rpc ReadBuffers().
message ReadBuffersRequest {
  // The |id|s of the buffer, as passed to CreateBuffers().
  // TODO: repeated uint32 buffer_ids = 1;
}

message ReadBuffersResponse {
  // TODO: uint32 buffer_id = 1;

  // Each streaming reply returns one or more trace packets (see
  // trace_packet.proto).
  // Why "bytes" here? If we just return the full TracePacket object, that will
  // force the Consumer to deserialize it. In many occasions, the Consumer will
  // not consume the TracePacket(s) locally but will just forward them over
  // the network or save them to a file. Deserializing them on-device would be
  // a waste of time, memory and energy.

  // TODO: in the past we agreed that a TracePacket can be very large (MBs).
  // However here it will hit the limit of the IPC layer in order to keep
  // the socket buffer bounded. On one side we could upgrade this protocol to
  // support chunks, so we could directly propagate the chunked TracePacket
  // stored in the log buffer. On the other side, this will likely just move
  // the problem on the consumer, that will need larger buffers for reassembly.
  // Perhaps we should just cap the size of a TracePacket to a lower size?
  repeated bytes trace_packets = 2;
}

// Arguments for rpc FreeBuffers().
message FreeBuffersRequest {
  // The |id|s of the buffer, as passed to CreateBuffers().
  repeated uint32 buffer_ids = 1;
}

message FreeBuffersResponse {}
