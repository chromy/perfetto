// Autogenerated by:
// ../../src/tools/ftrace_proto_gen/ftrace_proto_gen.cc
// Do not edit.

syntax = "proto2";
package perfetto.protos;

message NfsAccessEnterFtraceEvent {
  optional uint64 dev = 1;
  optional uint32 fhandle = 2;
  optional uint64 fileid = 3;
  optional uint64 version = 4;
}
message NfsAccessExitFtraceEvent {
  optional uint64 error = 1;
  optional uint64 dev = 2;
  optional uint32 fhandle = 3;
  optional uint32 type = 4;
  optional uint64 fileid = 5;
  optional uint64 version = 6;
  optional int64 size = 7;
  optional uint64 nfsi_flags = 8;
  optional uint64 cache_validity = 9;
  optional uint32 mask = 10;
  optional uint32 permitted = 11;
}
message NfsAopReadaheadFtraceEvent {
  optional uint64 dev = 1;
  optional uint32 fhandle = 2;
  optional uint64 fileid = 3;
  optional uint64 version = 4;
  optional int64 offset = 5;
  optional uint32 nr_pages = 6;
}
message NfsAopReadaheadDoneFtraceEvent {
  optional uint64 dev = 1;
  optional uint32 fhandle = 2;
  optional int32 ret = 3;
  optional uint64 fileid = 4;
  optional uint64 version = 5;
  optional int64 offset = 6;
  optional uint32 nr_pages = 7;
}
message NfsAopReadpageFtraceEvent {
  optional uint64 dev = 1;
  optional uint32 fhandle = 2;
  optional uint64 fileid = 3;
  optional uint64 version = 4;
  optional int64 offset = 5;
}
message NfsAopReadpageDoneFtraceEvent {
  optional uint64 dev = 1;
  optional uint32 fhandle = 2;
  optional int32 ret = 3;
  optional uint64 fileid = 4;
  optional uint64 version = 5;
  optional int64 offset = 6;
}
message NfsAtomicOpenEnterFtraceEvent {
  optional uint64 flags = 1;
  optional uint64 fmode = 2;
  optional uint64 dev = 3;
  optional uint64 dir = 4;
  optional string name = 5;
}
message NfsAtomicOpenExitFtraceEvent {
  optional uint64 error = 1;
  optional uint64 flags = 2;
  optional uint64 fmode = 3;
  optional uint64 dev = 4;
  optional uint64 dir = 5;
  optional string name = 6;
}
message NfsCommitDoneFtraceEvent {
  optional uint64 dev = 1;
  optional uint32 fhandle = 2;
  optional uint64 fileid = 3;
  optional int64 offset = 4;
  optional int32 error = 5;
  optional uint64 stable = 6;
  optional string verifier = 7;
}
message NfsCommitErrorFtraceEvent {
  optional uint64 dev = 1;
  optional uint32 fhandle = 2;
  optional uint64 fileid = 3;
  optional int64 offset = 4;
  optional uint32 count = 5;
  optional int32 error = 6;
}
message NfsCompErrorFtraceEvent {
  optional uint64 dev = 1;
  optional uint32 fhandle = 2;
  optional uint64 fileid = 3;
  optional int64 offset = 4;
  optional uint32 count = 5;
  optional int32 error = 6;
}
message NfsCreateEnterFtraceEvent {
  optional uint64 flags = 1;
  optional uint64 dev = 2;
  optional uint64 dir = 3;
  optional string name = 4;
}
message NfsCreateExitFtraceEvent {
  optional uint64 error = 1;
  optional uint64 flags = 2;
  optional uint64 dev = 3;
  optional uint64 dir = 4;
  optional string name = 5;
}
message NfsDirectCommitCompleteFtraceEvent {
  optional uint64 dev = 1;
  optional uint64 fileid = 2;
  optional uint32 fhandle = 3;
  optional int64 offset = 4;
  optional int64 count = 5;
  optional int64 bytes_left = 6;
  optional int64 error = 7;
  optional int32 flags = 8;
}
message NfsDirectReschedWriteFtraceEvent {
  optional uint64 dev = 1;
  optional uint64 fileid = 2;
  optional uint32 fhandle = 3;
  optional int64 offset = 4;
  optional int64 count = 5;
  optional int64 bytes_left = 6;
  optional int64 error = 7;
  optional int32 flags = 8;
}
message NfsDirectWriteCompleteFtraceEvent {
  optional uint64 dev = 1;
  optional uint64 fileid = 2;
  optional uint32 fhandle = 3;
  optional int64 offset = 4;
  optional int64 count = 5;
  optional int64 bytes_left = 6;
  optional int64 error = 7;
  optional int32 flags = 8;
}
message NfsDirectWriteCompletionFtraceEvent {
  optional uint64 dev = 1;
  optional uint64 fileid = 2;
  optional uint32 fhandle = 3;
  optional int64 offset = 4;
  optional int64 count = 5;
  optional int64 bytes_left = 6;
  optional int64 error = 7;
  optional int32 flags = 8;
}
message NfsDirectWriteRescheduleIoFtraceEvent {
  optional uint64 dev = 1;
  optional uint64 fileid = 2;
  optional uint32 fhandle = 3;
  optional int64 offset = 4;
  optional int64 count = 5;
  optional int64 bytes_left = 6;
  optional int64 error = 7;
  optional int32 flags = 8;
}
message NfsDirectWriteScheduleIovecFtraceEvent {
  optional uint64 dev = 1;
  optional uint64 fileid = 2;
  optional uint32 fhandle = 3;
  optional int64 offset = 4;
  optional int64 count = 5;
  optional int64 bytes_left = 6;
  optional int64 error = 7;
  optional int32 flags = 8;
}
message NfsFhToDentryFtraceEvent {
  optional int32 error = 1;
  optional uint64 dev = 2;
  optional uint32 fhandle = 3;
  optional uint64 fileid = 4;
}
message NfsFscacheReadPageFtraceEvent {
  optional uint64 dev = 1;
  optional uint32 fhandle = 2;
  optional uint64 fileid = 3;
  optional int64 offset = 4;
}
message NfsFscacheReadPageExitFtraceEvent {
  optional int32 error = 1;
  optional uint64 dev = 2;
  optional uint32 fhandle = 3;
  optional uint64 fileid = 4;
  optional int64 offset = 5;
}
message NfsFscacheWritePageFtraceEvent {
  optional uint64 dev = 1;
  optional uint32 fhandle = 2;
  optional uint64 fileid = 3;
  optional int64 offset = 4;
}
message NfsFscacheWritePageExitFtraceEvent {
  optional int32 error = 1;
  optional uint64 dev = 2;
  optional uint32 fhandle = 3;
  optional uint64 fileid = 4;
  optional int64 offset = 5;
}
message NfsFsyncEnterFtraceEvent {
  optional uint64 dev = 1;
  optional uint32 fhandle = 2;
  optional uint64 fileid = 3;
  optional uint64 version = 4;
}
message NfsFsyncExitFtraceEvent {
  optional uint64 error = 1;
  optional uint64 dev = 2;
  optional uint32 fhandle = 3;
  optional uint32 type = 4;
  optional uint64 fileid = 5;
  optional uint64 version = 6;
  optional int64 size = 7;
  optional uint64 nfsi_flags = 8;
  optional uint64 cache_validity = 9;
}
message NfsGetattrEnterFtraceEvent {
  optional uint64 dev = 1;
  optional uint32 fhandle = 2;
  optional uint64 fileid = 3;
  optional uint64 version = 4;
}
message NfsGetattrExitFtraceEvent {
  optional uint64 error = 1;
  optional uint64 dev = 2;
  optional uint32 fhandle = 3;
  optional uint32 type = 4;
  optional uint64 fileid = 5;
  optional uint64 version = 6;
  optional int64 size = 7;
  optional uint64 nfsi_flags = 8;
  optional uint64 cache_validity = 9;
}
message NfsInitiateCommitFtraceEvent {
  optional uint64 dev = 1;
  optional uint32 fhandle = 2;
  optional uint64 fileid = 3;
  optional int64 offset = 4;
  optional uint32 count = 5;
}
message NfsInitiateReadFtraceEvent {
  optional uint64 dev = 1;
  optional uint32 fhandle = 2;
  optional uint64 fileid = 3;
  optional int64 offset = 4;
  optional uint32 count = 5;
}
message NfsInitiateWriteFtraceEvent {
  optional uint64 dev = 1;
  optional uint32 fhandle = 2;
  optional uint64 fileid = 3;
  optional int64 offset = 4;
  optional uint32 count = 5;
  optional uint64 stable = 6;
}
message NfsInvalidateMappingEnterFtraceEvent {
  optional uint64 dev = 1;
  optional uint32 fhandle = 2;
  optional uint64 fileid = 3;
  optional uint64 version = 4;
}
message NfsInvalidateMappingExitFtraceEvent {
  optional uint64 error = 1;
  optional uint64 dev = 2;
  optional uint32 fhandle = 3;
  optional uint32 type = 4;
  optional uint64 fileid = 5;
  optional uint64 version = 6;
  optional int64 size = 7;
  optional uint64 nfsi_flags = 8;
  optional uint64 cache_validity = 9;
}
message NfsLinkEnterFtraceEvent {
  optional uint64 dev = 1;
  optional uint64 fileid = 2;
  optional uint64 dir = 3;
  optional string name = 4;
}
message NfsLinkExitFtraceEvent {
  optional uint64 error = 1;
  optional uint64 dev = 2;
  optional uint64 fileid = 3;
  optional uint64 dir = 4;
  optional string name = 5;
}
message NfsLookupEnterFtraceEvent {
  optional uint64 flags = 1;
  optional uint64 dev = 2;
  optional uint64 dir = 3;
  optional string name = 4;
}
message NfsLookupExitFtraceEvent {
  optional uint64 error = 1;
  optional uint64 flags = 2;
  optional uint64 dev = 3;
  optional uint64 dir = 4;
  optional string name = 5;
}
message NfsLookupRevalidateEnterFtraceEvent {
  optional uint64 flags = 1;
  optional uint64 dev = 2;
  optional uint64 dir = 3;
  optional string name = 4;
}
message NfsLookupRevalidateExitFtraceEvent {
  optional uint64 error = 1;
  optional uint64 flags = 2;
  optional uint64 dev = 3;
  optional uint64 dir = 4;
  optional string name = 5;
}
message NfsMkdirEnterFtraceEvent {
  optional uint64 dev = 1;
  optional uint64 dir = 2;
  optional string name = 3;
}
message NfsMkdirExitFtraceEvent {
  optional uint64 error = 1;
  optional uint64 dev = 2;
  optional uint64 dir = 3;
  optional string name = 4;
}
message NfsMknodEnterFtraceEvent {
  optional uint64 dev = 1;
  optional uint64 dir = 2;
  optional string name = 3;
}
message NfsMknodExitFtraceEvent {
  optional uint64 error = 1;
  optional uint64 dev = 2;
  optional uint64 dir = 3;
  optional string name = 4;
}
message NfsMountAssignFtraceEvent {
  optional string option = 1;
  optional string value = 2;
}
message NfsMountOptionFtraceEvent {
  optional string option = 1;
}
message NfsMountPathFtraceEvent {
  optional string path = 1;
}
message NfsPgioErrorFtraceEvent {
  optional uint64 dev = 1;
  optional uint32 fhandle = 2;
  optional uint64 fileid = 3;
  optional int64 offset = 4;
  optional uint32 arg_count = 5;
  optional uint32 res_count = 6;
  optional int64 pos = 7;
  optional int32 error = 8;
}
message NfsReaddirCacheFillFtraceEvent {
  optional uint64 dev = 1;
  optional uint32 fhandle = 2;
  optional uint64 fileid = 3;
  optional uint64 version = 4;
  optional string verifier = 5;
  optional uint64 cookie = 6;
  optional uint64 index = 7;
  optional uint32 dtsize = 8;
}
message NfsReaddirCacheFillDoneFtraceEvent {
  optional uint64 error = 1;
  optional uint64 dev = 2;
  optional uint32 fhandle = 3;
  optional uint32 type = 4;
  optional uint64 fileid = 5;
  optional uint64 version = 6;
  optional int64 size = 7;
  optional uint64 nfsi_flags = 8;
  optional uint64 cache_validity = 9;
}
message NfsReaddirForceReaddirplusFtraceEvent {
  optional uint64 dev = 1;
  optional uint32 fhandle = 2;
  optional uint64 fileid = 3;
  optional uint64 version = 4;
}
message NfsReaddirInvalidateCacheRangeFtraceEvent {
  optional uint64 dev = 1;
  optional uint32 fhandle = 2;
  optional uint64 fileid = 3;
  optional uint64 version = 4;
  optional int64 range_start = 5;
  optional int64 range_end = 6;
}
message NfsReaddirLookupFtraceEvent {
  optional uint64 flags = 1;
  optional uint64 dev = 2;
  optional uint64 dir = 3;
  optional string name = 4;
}
message NfsReaddirLookupRevalidateFtraceEvent {
  optional uint64 error = 1;
  optional uint64 flags = 2;
  optional uint64 dev = 3;
  optional uint64 dir = 4;
  optional string name = 5;
}
message NfsReaddirLookupRevalidateFailedFtraceEvent {
  optional uint64 flags = 1;
  optional uint64 dev = 2;
  optional uint64 dir = 3;
  optional string name = 4;
}
message NfsReaddirUncachedFtraceEvent {
  optional uint64 dev = 1;
  optional uint32 fhandle = 2;
  optional uint64 fileid = 3;
  optional uint64 version = 4;
  optional string verifier = 5;
  optional uint64 cookie = 6;
  optional uint64 index = 7;
  optional uint32 dtsize = 8;
}
message NfsReaddirUncachedDoneFtraceEvent {
  optional uint64 error = 1;
  optional uint64 dev = 2;
  optional uint32 fhandle = 3;
  optional uint32 type = 4;
  optional uint64 fileid = 5;
  optional uint64 version = 6;
  optional int64 size = 7;
  optional uint64 nfsi_flags = 8;
  optional uint64 cache_validity = 9;
}
message NfsReadpageDoneFtraceEvent {
  optional uint64 dev = 1;
  optional uint32 fhandle = 2;
  optional uint64 fileid = 3;
  optional int64 offset = 4;
  optional uint32 arg_count = 5;
  optional uint32 res_count = 6;
  optional uint32 eof = 7;
  optional int32 error = 8;
}
message NfsReadpageShortFtraceEvent {
  optional uint64 dev = 1;
  optional uint32 fhandle = 2;
  optional uint64 fileid = 3;
  optional int64 offset = 4;
  optional uint32 arg_count = 5;
  optional uint32 res_count = 6;
  optional uint32 eof = 7;
  optional int32 error = 8;
}
message NfsRefreshInodeEnterFtraceEvent {
  optional uint64 dev = 1;
  optional uint32 fhandle = 2;
  optional uint64 fileid = 3;
  optional uint64 version = 4;
}
message NfsRefreshInodeExitFtraceEvent {
  optional uint64 error = 1;
  optional uint64 dev = 2;
  optional uint32 fhandle = 3;
  optional uint32 type = 4;
  optional uint64 fileid = 5;
  optional uint64 version = 6;
  optional int64 size = 7;
  optional uint64 nfsi_flags = 8;
  optional uint64 cache_validity = 9;
}
message NfsRemoveEnterFtraceEvent {
  optional uint64 dev = 1;
  optional uint64 dir = 2;
  optional string name = 3;
}
message NfsRemoveExitFtraceEvent {
  optional uint64 error = 1;
  optional uint64 dev = 2;
  optional uint64 dir = 3;
  optional string name = 4;
}
message NfsRenameEnterFtraceEvent {
  optional uint64 dev = 1;
  optional uint64 old_dir = 2;
  optional uint64 new_dir = 3;
  optional string old_name = 4;
  optional string new_name = 5;
}
message NfsRenameExitFtraceEvent {
  optional uint64 dev = 1;
  optional uint64 error = 2;
  optional uint64 old_dir = 3;
  optional string old_name = 4;
  optional uint64 new_dir = 5;
  optional string new_name = 6;
}
message NfsRevalidateInodeEnterFtraceEvent {
  optional uint64 dev = 1;
  optional uint32 fhandle = 2;
  optional uint64 fileid = 3;
  optional uint64 version = 4;
}
message NfsRevalidateInodeExitFtraceEvent {
  optional uint64 error = 1;
  optional uint64 dev = 2;
  optional uint32 fhandle = 3;
  optional uint32 type = 4;
  optional uint64 fileid = 5;
  optional uint64 version = 6;
  optional int64 size = 7;
  optional uint64 nfsi_flags = 8;
  optional uint64 cache_validity = 9;
}
message NfsRmdirEnterFtraceEvent {
  optional uint64 dev = 1;
  optional uint64 dir = 2;
  optional string name = 3;
}
message NfsRmdirExitFtraceEvent {
  optional uint64 error = 1;
  optional uint64 dev = 2;
  optional uint64 dir = 3;
  optional string name = 4;
}
message NfsSetattrEnterFtraceEvent {
  optional uint64 dev = 1;
  optional uint32 fhandle = 2;
  optional uint64 fileid = 3;
  optional uint64 version = 4;
}
message NfsSetattrExitFtraceEvent {
  optional uint64 error = 1;
  optional uint64 dev = 2;
  optional uint32 fhandle = 3;
  optional uint32 type = 4;
  optional uint64 fileid = 5;
  optional uint64 version = 6;
  optional int64 size = 7;
  optional uint64 nfsi_flags = 8;
  optional uint64 cache_validity = 9;
}
message NfsSetCacheInvalidFtraceEvent {
  optional uint64 error = 1;
  optional uint64 dev = 2;
  optional uint32 fhandle = 3;
  optional uint32 type = 4;
  optional uint64 fileid = 5;
  optional uint64 version = 6;
  optional int64 size = 7;
  optional uint64 nfsi_flags = 8;
  optional uint64 cache_validity = 9;
}
message NfsSetInodeStaleFtraceEvent {
  optional uint64 dev = 1;
  optional uint32 fhandle = 2;
  optional uint64 fileid = 3;
  optional uint64 version = 4;
}
message NfsSillyrenameRenameFtraceEvent {
  optional uint64 dev = 1;
  optional uint64 error = 2;
  optional uint64 old_dir = 3;
  optional string old_name = 4;
  optional uint64 new_dir = 5;
  optional string new_name = 6;
}
message NfsSillyrenameUnlinkFtraceEvent {
  optional uint64 dev = 1;
  optional uint64 error = 2;
  optional uint64 dir = 3;
  optional string name = 4;
}
message NfsSizeGrowFtraceEvent {
  optional uint64 dev = 1;
  optional uint32 fhandle = 2;
  optional uint64 fileid = 3;
  optional uint64 version = 4;
  optional int64 cur_size = 5;
  optional int64 new_size = 6;
}
message NfsSizeTruncateFtraceEvent {
  optional uint64 dev = 1;
  optional uint32 fhandle = 2;
  optional uint64 fileid = 3;
  optional uint64 version = 4;
  optional int64 cur_size = 5;
  optional int64 new_size = 6;
}
message NfsSizeUpdateFtraceEvent {
  optional uint64 dev = 1;
  optional uint32 fhandle = 2;
  optional uint64 fileid = 3;
  optional uint64 version = 4;
  optional int64 cur_size = 5;
  optional int64 new_size = 6;
}
message NfsSizeWccFtraceEvent {
  optional uint64 dev = 1;
  optional uint32 fhandle = 2;
  optional uint64 fileid = 3;
  optional uint64 version = 4;
  optional int64 cur_size = 5;
  optional int64 new_size = 6;
}
message NfsSymlinkEnterFtraceEvent {
  optional uint64 dev = 1;
  optional uint64 dir = 2;
  optional string name = 3;
}
message NfsSymlinkExitFtraceEvent {
  optional uint64 error = 1;
  optional uint64 dev = 2;
  optional uint64 dir = 3;
  optional string name = 4;
}
message NfsUnlinkEnterFtraceEvent {
  optional uint64 dev = 1;
  optional uint64 dir = 2;
  optional string name = 3;
}
message NfsUnlinkExitFtraceEvent {
  optional uint64 error = 1;
  optional uint64 dev = 2;
  optional uint64 dir = 3;
  optional string name = 4;
}
message NfsWritebackDoneFtraceEvent {
  optional uint64 dev = 1;
  optional uint32 fhandle = 2;
  optional uint64 fileid = 3;
  optional int64 offset = 4;
  optional uint32 arg_count = 5;
  optional uint32 res_count = 6;
  optional int32 error = 7;
  optional uint64 stable = 8;
  optional string verifier = 9;
}
message NfsWritebackInodeEnterFtraceEvent {
  optional uint64 dev = 1;
  optional uint32 fhandle = 2;
  optional uint64 fileid = 3;
  optional uint64 version = 4;
}
message NfsWritebackInodeExitFtraceEvent {
  optional uint64 error = 1;
  optional uint64 dev = 2;
  optional uint32 fhandle = 3;
  optional uint32 type = 4;
  optional uint64 fileid = 5;
  optional uint64 version = 6;
  optional int64 size = 7;
  optional uint64 nfsi_flags = 8;
  optional uint64 cache_validity = 9;
}
message NfsWritebackPageEnterFtraceEvent {
  optional uint64 dev = 1;
  optional uint32 fhandle = 2;
  optional uint64 fileid = 3;
  optional uint64 version = 4;
}
message NfsWritebackPageExitFtraceEvent {
  optional uint64 error = 1;
  optional uint64 dev = 2;
  optional uint32 fhandle = 3;
  optional uint32 type = 4;
  optional uint64 fileid = 5;
  optional uint64 version = 6;
  optional int64 size = 7;
  optional uint64 nfsi_flags = 8;
  optional uint64 cache_validity = 9;
}
message NfsWriteErrorFtraceEvent {
  optional uint64 dev = 1;
  optional uint32 fhandle = 2;
  optional uint64 fileid = 3;
  optional int64 offset = 4;
  optional uint32 count = 5;
  optional int32 error = 6;
}
message NfsXdrBadFilehandleFtraceEvent {
  optional uint32 task_id = 1;
  optional uint32 client_id = 2;
  optional uint32 xid = 3;
  optional int32 version = 4;
  optional uint64 error = 5;
  optional string program = 6;
  optional string procedure = 7;
}
message NfsXdrStatusFtraceEvent {
  optional uint32 task_id = 1;
  optional uint32 client_id = 2;
  optional uint32 xid = 3;
  optional int32 version = 4;
  optional uint64 error = 5;
  optional string program = 6;
  optional string procedure = 7;
}
