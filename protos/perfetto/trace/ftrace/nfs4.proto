// Autogenerated by:
// ../../src/tools/ftrace_proto_gen/ftrace_proto_gen.cc
// Do not edit.

syntax = "proto2";
package perfetto.protos;

message FfLayoutCommitErrorFtraceEvent {
  optional uint64 error = 1;
  optional uint64 dev = 2;
  optional uint32 fhandle = 3;
  optional uint64 fileid = 4;
  optional int64 offset = 5;
  optional uint32 count = 6;
  optional string dstaddr = 7;
}
message FfLayoutReadErrorFtraceEvent {
  optional uint64 error = 1;
  optional uint64 dev = 2;
  optional uint32 fhandle = 3;
  optional uint64 fileid = 4;
  optional int64 offset = 5;
  optional uint32 count = 6;
  optional int32 stateid_seq = 7;
  optional uint32 stateid_hash = 8;
  optional string dstaddr = 9;
}
message FfLayoutWriteErrorFtraceEvent {
  optional uint64 error = 1;
  optional uint64 dev = 2;
  optional uint32 fhandle = 3;
  optional uint64 fileid = 4;
  optional int64 offset = 5;
  optional uint32 count = 6;
  optional int32 stateid_seq = 7;
  optional uint32 stateid_hash = 8;
  optional string dstaddr = 9;
}
message Nfs4AccessFtraceEvent {
  optional uint64 dev = 1;
  optional uint32 fhandle = 2;
  optional uint64 fileid = 3;
  optional uint64 error = 4;
}
message Nfs4BindConnToSessionFtraceEvent {
  optional string dstaddr = 1;
  optional uint64 error = 2;
}
message Nfs4CachedOpenFtraceEvent {
  optional uint64 dev = 1;
  optional uint32 fhandle = 2;
  optional uint64 fileid = 3;
  optional uint32 fmode = 4;
  optional int32 stateid_seq = 5;
  optional uint32 stateid_hash = 6;
}
message Nfs4CbGetattrFtraceEvent {
  optional uint64 error = 1;
  optional uint64 dev = 2;
  optional uint32 fhandle = 3;
  optional uint64 fileid = 4;
  optional string dstaddr = 5;
}
message Nfs4CbLayoutrecallFileFtraceEvent {
  optional uint64 error = 1;
  optional uint64 dev = 2;
  optional uint32 fhandle = 3;
  optional uint64 fileid = 4;
  optional string dstaddr = 5;
  optional int32 stateid_seq = 6;
  optional uint32 stateid_hash = 7;
}
message Nfs4CbOffloadFtraceEvent {
  optional uint64 error = 1;
  optional uint32 fhandle = 2;
  optional int64 cb_count = 3;
  optional int32 cb_how = 4;
  optional int32 cb_stateid_seq = 5;
  optional uint32 cb_stateid_hash = 6;
}
message Nfs4CbRecallFtraceEvent {
  optional uint64 error = 1;
  optional uint64 dev = 2;
  optional uint32 fhandle = 3;
  optional uint64 fileid = 4;
  optional string dstaddr = 5;
  optional int32 stateid_seq = 6;
  optional uint32 stateid_hash = 7;
}
message Nfs4CbSeqidErrFtraceEvent {
  optional uint32 session = 1;
  optional uint32 slot_nr = 2;
  optional uint32 seq_nr = 3;
  optional uint32 highest_slotid = 4;
  optional uint32 cachethis = 5;
  optional uint64 error = 6;
}
message Nfs4CbSequenceFtraceEvent {
  optional uint32 session = 1;
  optional uint32 slot_nr = 2;
  optional uint32 seq_nr = 3;
  optional uint32 highest_slotid = 4;
  optional uint32 cachethis = 5;
  optional uint64 error = 6;
}
message Nfs4CloneFtraceEvent {
  optional uint64 error = 1;
  optional uint32 src_fhandle = 2;
  optional uint32 src_fileid = 3;
  optional uint32 dst_fhandle = 4;
  optional uint32 dst_fileid = 5;
  optional uint64 src_dev = 6;
  optional uint64 dst_dev = 7;
  optional int64 src_offset = 8;
  optional int64 dst_offset = 9;
  optional int32 src_stateid_seq = 10;
  optional uint32 src_stateid_hash = 11;
  optional int32 dst_stateid_seq = 12;
  optional uint32 dst_stateid_hash = 13;
  optional int64 len = 14;
}
message Nfs4CloseFtraceEvent {
  optional uint64 dev = 1;
  optional uint32 fhandle = 2;
  optional uint64 fileid = 3;
  optional uint32 fmode = 4;
  optional uint64 error = 5;
  optional int32 stateid_seq = 6;
  optional uint32 stateid_hash = 7;
}
message Nfs4CloseStateidUpdateWaitFtraceEvent {
  optional uint64 dev = 1;
  optional uint32 fhandle = 2;
  optional uint64 fileid = 3;
  optional uint64 error = 4;
  optional int32 stateid_seq = 5;
  optional uint32 stateid_hash = 6;
}
message Nfs4CommitFtraceEvent {
  optional uint64 dev = 1;
  optional uint32 fhandle = 2;
  optional uint64 fileid = 3;
  optional uint64 error = 4;
  optional int64 offset = 5;
  optional uint32 count = 6;
  optional int32 layoutstateid_seq = 7;
  optional uint32 layoutstateid_hash = 8;
}
message Nfs4CopyFtraceEvent {
  optional uint64 error = 1;
  optional uint32 src_fhandle = 2;
  optional uint32 src_fileid = 3;
  optional uint32 dst_fhandle = 4;
  optional uint32 dst_fileid = 5;
  optional uint64 src_dev = 6;
  optional uint64 dst_dev = 7;
  optional int32 src_stateid_seq = 8;
  optional uint32 src_stateid_hash = 9;
  optional int32 dst_stateid_seq = 10;
  optional uint32 dst_stateid_hash = 11;
  optional int64 src_offset = 12;
  optional int64 dst_offset = 13;
  optional uint32 sync = 14;
  optional int64 len = 15;
  optional int32 res_stateid_seq = 16;
  optional uint32 res_stateid_hash = 17;
  optional int64 res_count = 18;
  optional uint32 res_sync = 19;
  optional uint32 res_cons = 20;
  optional uint32 intra = 21;
}
message Nfs4CopyNotifyFtraceEvent {
  optional uint64 error = 1;
  optional uint32 fhandle = 2;
  optional uint32 fileid = 3;
  optional uint64 dev = 4;
  optional int32 stateid_seq = 5;
  optional uint32 stateid_hash = 6;
  optional int32 res_stateid_seq = 7;
  optional uint32 res_stateid_hash = 8;
}
message Nfs4CreateSessionFtraceEvent {
  optional string dstaddr = 1;
  optional uint64 error = 2;
}
message Nfs4DeallocateFtraceEvent {
  optional uint64 error = 1;
  optional int64 offset = 2;
  optional int64 len = 3;
  optional uint64 dev = 4;
  optional uint32 fhandle = 5;
  optional uint64 fileid = 6;
  optional int32 stateid_seq = 7;
  optional uint32 stateid_hash = 8;
}
message Nfs4DelegreturnFtraceEvent {
  optional uint64 dev = 1;
  optional uint32 fhandle = 2;
  optional uint64 fileid = 3;
  optional uint64 error = 4;
  optional int32 stateid_seq = 5;
  optional uint32 stateid_hash = 6;
}
message Nfs4DelegreturnExitFtraceEvent {
  optional uint64 dev = 1;
  optional uint32 fhandle = 2;
  optional uint64 error = 3;
  optional int32 stateid_seq = 4;
  optional uint32 stateid_hash = 5;
}
message Nfs4DestroyClientidFtraceEvent {
  optional string dstaddr = 1;
  optional uint64 error = 2;
}
message Nfs4DestroySessionFtraceEvent {
  optional string dstaddr = 1;
  optional uint64 error = 2;
}
message Nfs4DeviceidFreeFtraceEvent {
  optional string dstaddr = 1;
}
message Nfs4ExchangeIdFtraceEvent {
  optional string dstaddr = 1;
  optional uint64 error = 2;
}
message Nfs4FallocateFtraceEvent {
  optional uint64 error = 1;
  optional int64 offset = 2;
  optional int64 len = 3;
  optional uint64 dev = 4;
  optional uint32 fhandle = 5;
  optional uint64 fileid = 6;
  optional int32 stateid_seq = 7;
  optional uint32 stateid_hash = 8;
}
message Nfs4FindDeviceidFtraceEvent {
  optional uint64 dev = 1;
  optional int32 status = 2;
  optional string dstaddr = 3;
}
message Nfs4FsinfoFtraceEvent {
  optional uint64 dev = 1;
  optional uint32 fhandle = 2;
  optional uint64 fileid = 3;
  optional uint32 valid = 4;
  optional uint64 error = 5;
}
message Nfs4GetAclFtraceEvent {
  optional uint64 dev = 1;
  optional uint32 fhandle = 2;
  optional uint64 fileid = 3;
  optional uint64 error = 4;
}
message Nfs4GetattrFtraceEvent {
  optional uint64 dev = 1;
  optional uint32 fhandle = 2;
  optional uint64 fileid = 3;
  optional uint32 valid = 4;
  optional uint64 error = 5;
}
message Nfs4GetdeviceinfoFtraceEvent {
  optional uint64 dev = 1;
  optional int32 status = 2;
  optional string dstaddr = 3;
}
message Nfs4GetFsLocationsFtraceEvent {
  optional uint64 dev = 1;
  optional uint64 error = 2;
  optional uint64 dir = 3;
  optional string name = 4;
}
message Nfs4GetLockFtraceEvent {
  optional uint64 error = 1;
  optional uint64 cmd = 2;
  optional uint64 type = 3;
  optional int64 start = 4;
  optional int64 end = 5;
  optional uint64 dev = 6;
  optional uint32 fhandle = 7;
  optional uint64 fileid = 8;
  optional int32 stateid_seq = 9;
  optional uint32 stateid_hash = 10;
}
message Nfs4GetSecurityLabelFtraceEvent {
  optional uint64 dev = 1;
  optional uint32 fhandle = 2;
  optional uint64 fileid = 3;
  optional uint64 error = 4;
}
message Nfs4GetxattrFtraceEvent {
  optional uint64 error = 1;
  optional uint64 dev = 2;
  optional uint32 fhandle = 3;
  optional uint64 fileid = 4;
  optional string name = 5;
}
message Nfs4LayoutcommitFtraceEvent {
  optional uint64 dev = 1;
  optional uint32 fhandle = 2;
  optional uint64 fileid = 3;
  optional uint64 error = 4;
  optional int32 stateid_seq = 5;
  optional uint32 stateid_hash = 6;
}
message Nfs4LayouterrorFtraceEvent {
  optional uint64 dev = 1;
  optional uint32 fhandle = 2;
  optional uint64 fileid = 3;
  optional uint64 error = 4;
  optional int32 stateid_seq = 5;
  optional uint32 stateid_hash = 6;
}
message Nfs4LayoutgetFtraceEvent {
  optional uint64 dev = 1;
  optional uint32 fhandle = 2;
  optional uint64 fileid = 3;
  optional uint32 iomode = 4;
  optional uint64 offset = 5;
  optional uint64 count = 6;
  optional uint64 error = 7;
  optional int32 stateid_seq = 8;
  optional uint32 stateid_hash = 9;
  optional int32 layoutstateid_seq = 10;
  optional uint32 layoutstateid_hash = 11;
}
message Nfs4LayoutreturnFtraceEvent {
  optional uint64 dev = 1;
  optional uint32 fhandle = 2;
  optional uint64 fileid = 3;
  optional uint64 error = 4;
  optional int32 stateid_seq = 5;
  optional uint32 stateid_hash = 6;
}
message Nfs4LayoutreturnOnCloseFtraceEvent {
  optional uint64 dev = 1;
  optional uint32 fhandle = 2;
  optional uint64 fileid = 3;
  optional uint64 error = 4;
  optional int32 stateid_seq = 5;
  optional uint32 stateid_hash = 6;
}
message Nfs4LayoutstatsFtraceEvent {
  optional uint64 dev = 1;
  optional uint32 fhandle = 2;
  optional uint64 fileid = 3;
  optional uint64 error = 4;
  optional int32 stateid_seq = 5;
  optional uint32 stateid_hash = 6;
}
message Nfs4ListxattrFtraceEvent {
  optional uint64 dev = 1;
  optional uint32 fhandle = 2;
  optional uint64 fileid = 3;
  optional uint64 error = 4;
}
message Nfs4LlseekFtraceEvent {
  optional uint64 error = 1;
  optional uint32 fhandle = 2;
  optional uint32 fileid = 3;
  optional uint64 dev = 4;
  optional int32 stateid_seq = 5;
  optional uint32 stateid_hash = 6;
  optional int64 offset_s = 7;
  optional uint32 what = 8;
  optional int64 offset_r = 9;
  optional uint32 eof = 10;
}
message Nfs4LookupFtraceEvent {
  optional uint64 dev = 1;
  optional uint64 error = 2;
  optional uint64 dir = 3;
  optional string name = 4;
}
message Nfs4LookuppFtraceEvent {
  optional uint64 dev = 1;
  optional uint64 ino = 2;
  optional uint64 error = 3;
}
message Nfs4LookupRootFtraceEvent {
  optional uint64 dev = 1;
  optional uint32 fhandle = 2;
  optional uint64 fileid = 3;
  optional uint32 valid = 4;
  optional uint64 error = 5;
}
message Nfs4MapGidToGroupFtraceEvent {
  optional uint64 error = 1;
  optional uint32 id = 2;
  optional string name = 3;
}
message Nfs4MapGroupToGidFtraceEvent {
  optional uint64 error = 1;
  optional uint32 id = 2;
  optional string name = 3;
}
message Nfs4MapNameToUidFtraceEvent {
  optional uint64 error = 1;
  optional uint32 id = 2;
  optional string name = 3;
}
message Nfs4MapUidToNameFtraceEvent {
  optional uint64 error = 1;
  optional uint32 id = 2;
  optional string name = 3;
}
message Nfs4MkdirFtraceEvent {
  optional uint64 dev = 1;
  optional uint64 error = 2;
  optional uint64 dir = 3;
  optional string name = 4;
}
message Nfs4MknodFtraceEvent {
  optional uint64 dev = 1;
  optional uint64 error = 2;
  optional uint64 dir = 3;
  optional string name = 4;
}
message Nfs4OffloadCancelFtraceEvent {
  optional uint64 error = 1;
  optional uint32 fhandle = 2;
  optional int32 stateid_seq = 3;
  optional uint32 stateid_hash = 4;
}
message Nfs4OpenExpiredFtraceEvent {
  optional uint64 error = 1;
  optional uint64 flags = 2;
  optional uint64 fmode = 3;
  optional uint64 dev = 4;
  optional uint32 fhandle = 5;
  optional uint64 fileid = 6;
  optional uint64 dir = 7;
  optional string name = 8;
  optional int32 stateid_seq = 9;
  optional uint32 stateid_hash = 10;
  optional int32 openstateid_seq = 11;
  optional uint32 openstateid_hash = 12;
}
message Nfs4OpenFileFtraceEvent {
  optional uint64 error = 1;
  optional uint64 flags = 2;
  optional uint64 fmode = 3;
  optional uint64 dev = 4;
  optional uint32 fhandle = 5;
  optional uint64 fileid = 6;
  optional uint64 dir = 7;
  optional string name = 8;
  optional int32 stateid_seq = 9;
  optional uint32 stateid_hash = 10;
  optional int32 openstateid_seq = 11;
  optional uint32 openstateid_hash = 12;
}
message Nfs4OpenReclaimFtraceEvent {
  optional uint64 error = 1;
  optional uint64 flags = 2;
  optional uint64 fmode = 3;
  optional uint64 dev = 4;
  optional uint32 fhandle = 5;
  optional uint64 fileid = 6;
  optional uint64 dir = 7;
  optional string name = 8;
  optional int32 stateid_seq = 9;
  optional uint32 stateid_hash = 10;
  optional int32 openstateid_seq = 11;
  optional uint32 openstateid_hash = 12;
}
message Nfs4OpenStateidUpdateFtraceEvent {
  optional uint64 dev = 1;
  optional uint32 fhandle = 2;
  optional uint64 fileid = 3;
  optional uint64 error = 4;
  optional int32 stateid_seq = 5;
  optional uint32 stateid_hash = 6;
}
message Nfs4OpenStateidUpdateWaitFtraceEvent {
  optional uint64 dev = 1;
  optional uint32 fhandle = 2;
  optional uint64 fileid = 3;
  optional uint64 error = 4;
  optional int32 stateid_seq = 5;
  optional uint32 stateid_hash = 6;
}
message Nfs4PnfsCommitDsFtraceEvent {
  optional uint64 dev = 1;
  optional uint32 fhandle = 2;
  optional uint64 fileid = 3;
  optional uint64 error = 4;
  optional int64 offset = 5;
  optional uint32 count = 6;
  optional int32 layoutstateid_seq = 7;
  optional uint32 layoutstateid_hash = 8;
}
message Nfs4PnfsReadFtraceEvent {
  optional uint64 dev = 1;
  optional uint32 fhandle = 2;
  optional uint64 fileid = 3;
  optional int64 offset = 4;
  optional uint32 arg_count = 5;
  optional uint32 res_count = 6;
  optional uint64 error = 7;
  optional int32 stateid_seq = 8;
  optional uint32 stateid_hash = 9;
  optional int32 layoutstateid_seq = 10;
  optional uint32 layoutstateid_hash = 11;
}
message Nfs4PnfsWriteFtraceEvent {
  optional uint64 dev = 1;
  optional uint32 fhandle = 2;
  optional uint64 fileid = 3;
  optional int64 offset = 4;
  optional uint32 arg_count = 5;
  optional uint32 res_count = 6;
  optional uint64 error = 7;
  optional int32 stateid_seq = 8;
  optional uint32 stateid_hash = 9;
  optional int32 layoutstateid_seq = 10;
  optional uint32 layoutstateid_hash = 11;
}
message Nfs4ReadFtraceEvent {
  optional uint64 dev = 1;
  optional uint32 fhandle = 2;
  optional uint64 fileid = 3;
  optional int64 offset = 4;
  optional uint32 arg_count = 5;
  optional uint32 res_count = 6;
  optional uint64 error = 7;
  optional int32 stateid_seq = 8;
  optional uint32 stateid_hash = 9;
  optional int32 layoutstateid_seq = 10;
  optional uint32 layoutstateid_hash = 11;
}
message Nfs4ReaddirFtraceEvent {
  optional uint64 dev = 1;
  optional uint32 fhandle = 2;
  optional uint64 fileid = 3;
  optional uint64 error = 4;
}
message Nfs4ReadlinkFtraceEvent {
  optional uint64 dev = 1;
  optional uint32 fhandle = 2;
  optional uint64 fileid = 3;
  optional uint64 error = 4;
}
message Nfs4ReclaimCompleteFtraceEvent {
  optional string dstaddr = 1;
  optional uint64 error = 2;
}
message Nfs4ReclaimDelegationFtraceEvent {
  optional uint64 dev = 1;
  optional uint32 fhandle = 2;
  optional uint64 fileid = 3;
  optional uint32 fmode = 4;
}
message Nfs4RemoveFtraceEvent {
  optional uint64 dev = 1;
  optional uint64 error = 2;
  optional uint64 dir = 3;
  optional string name = 4;
}
message Nfs4RemovexattrFtraceEvent {
  optional uint64 error = 1;
  optional uint64 dev = 2;
  optional uint32 fhandle = 3;
  optional uint64 fileid = 4;
  optional string name = 5;
}
message Nfs4RenameFtraceEvent {
  optional uint64 dev = 1;
  optional uint64 error = 2;
  optional uint64 olddir = 3;
  optional string oldname = 4;
  optional uint64 newdir = 5;
  optional string newname = 6;
}
message Nfs4RenewFtraceEvent {
  optional string dstaddr = 1;
  optional uint64 error = 2;
}
message Nfs4RenewAsyncFtraceEvent {
  optional string dstaddr = 1;
  optional uint64 error = 2;
}
message Nfs4SecinfoFtraceEvent {
  optional uint64 dev = 1;
  optional uint64 error = 2;
  optional uint64 dir = 3;
  optional string name = 4;
}
message Nfs4SequenceFtraceEvent {
  optional string dstaddr = 1;
  optional uint64 error = 2;
}
message Nfs4SequenceDoneFtraceEvent {
  optional uint32 session = 1;
  optional uint32 slot_nr = 2;
  optional uint32 seq_nr = 3;
  optional uint32 highest_slotid = 4;
  optional uint32 target_highest_slotid = 5;
  optional uint64 status_flags = 6;
  optional uint64 error = 7;
}
message Nfs4SetAclFtraceEvent {
  optional uint64 dev = 1;
  optional uint32 fhandle = 2;
  optional uint64 fileid = 3;
  optional uint64 error = 4;
}
message Nfs4SetattrFtraceEvent {
  optional uint64 dev = 1;
  optional uint32 fhandle = 2;
  optional uint64 fileid = 3;
  optional uint64 error = 4;
  optional int32 stateid_seq = 5;
  optional uint32 stateid_hash = 6;
}
message Nfs4SetclientidFtraceEvent {
  optional string dstaddr = 1;
  optional uint64 error = 2;
}
message Nfs4SetclientidConfirmFtraceEvent {
  optional string dstaddr = 1;
  optional uint64 error = 2;
}
message Nfs4SetDelegationFtraceEvent {
  optional uint64 dev = 1;
  optional uint32 fhandle = 2;
  optional uint64 fileid = 3;
  optional uint32 fmode = 4;
}
message Nfs4SetLockFtraceEvent {
  optional uint64 error = 1;
  optional uint64 cmd = 2;
  optional uint64 type = 3;
  optional int64 start = 4;
  optional int64 end = 5;
  optional uint64 dev = 6;
  optional uint32 fhandle = 7;
  optional uint64 fileid = 8;
  optional int32 stateid_seq = 9;
  optional uint32 stateid_hash = 10;
  optional int32 lockstateid_seq = 11;
  optional uint32 lockstateid_hash = 12;
}
message Nfs4SetSecurityLabelFtraceEvent {
  optional uint64 dev = 1;
  optional uint32 fhandle = 2;
  optional uint64 fileid = 3;
  optional uint64 error = 4;
}
message Nfs4SetupSequenceFtraceEvent {
  optional uint32 session = 1;
  optional uint32 slot_nr = 2;
  optional uint32 seq_nr = 3;
  optional uint32 highest_used_slotid = 4;
}
message Nfs4SetxattrFtraceEvent {
  optional uint64 error = 1;
  optional uint64 dev = 2;
  optional uint32 fhandle = 3;
  optional uint64 fileid = 4;
  optional string name = 5;
}
message Nfs4StateLockReclaimFtraceEvent {
  optional uint64 dev = 1;
  optional uint32 fhandle = 2;
  optional uint64 fileid = 3;
  optional uint64 state_flags = 4;
  optional uint64 lock_flags = 5;
  optional int32 stateid_seq = 6;
  optional uint32 stateid_hash = 7;
}
message Nfs4StateMgrFtraceEvent {
  optional uint64 state = 1;
  optional string hostname = 2;
}
message Nfs4StateMgrFailedFtraceEvent {
  optional uint64 error = 1;
  optional uint64 state = 2;
  optional string hostname = 3;
  optional string section = 4;
}
message Nfs4SymlinkFtraceEvent {
  optional uint64 dev = 1;
  optional uint64 error = 2;
  optional uint64 dir = 3;
  optional string name = 4;
}
message Nfs4TestDelegationStateidFtraceEvent {
  optional uint64 error = 1;
  optional uint64 dev = 2;
  optional uint32 fhandle = 3;
  optional uint64 fileid = 4;
  optional int32 stateid_seq = 5;
  optional uint32 stateid_hash = 6;
}
message Nfs4TestLockStateidFtraceEvent {
  optional uint64 error = 1;
  optional uint64 dev = 2;
  optional uint32 fhandle = 3;
  optional uint64 fileid = 4;
  optional int32 stateid_seq = 5;
  optional uint32 stateid_hash = 6;
}
message Nfs4TestOpenStateidFtraceEvent {
  optional uint64 error = 1;
  optional uint64 dev = 2;
  optional uint32 fhandle = 3;
  optional uint64 fileid = 4;
  optional int32 stateid_seq = 5;
  optional uint32 stateid_hash = 6;
}
message Nfs4UnlockFtraceEvent {
  optional uint64 error = 1;
  optional uint64 cmd = 2;
  optional uint64 type = 3;
  optional int64 start = 4;
  optional int64 end = 5;
  optional uint64 dev = 6;
  optional uint32 fhandle = 7;
  optional uint64 fileid = 8;
  optional int32 stateid_seq = 9;
  optional uint32 stateid_hash = 10;
}
message Nfs4WriteFtraceEvent {
  optional uint64 dev = 1;
  optional uint32 fhandle = 2;
  optional uint64 fileid = 3;
  optional int64 offset = 4;
  optional uint32 arg_count = 5;
  optional uint32 res_count = 6;
  optional uint64 error = 7;
  optional int32 stateid_seq = 8;
  optional uint32 stateid_hash = 9;
  optional int32 layoutstateid_seq = 10;
  optional uint32 layoutstateid_hash = 11;
}
message Nfs4XdrBadFilehandleFtraceEvent {
  optional uint32 task_id = 1;
  optional uint32 client_id = 2;
  optional uint32 xid = 3;
  optional uint32 op = 4;
  optional uint64 error = 5;
}
message Nfs4XdrBadOperationFtraceEvent {
  optional uint32 task_id = 1;
  optional uint32 client_id = 2;
  optional uint32 xid = 3;
  optional uint32 op = 4;
  optional uint32 expected = 5;
}
message Nfs4XdrStatusFtraceEvent {
  optional uint32 task_id = 1;
  optional uint32 client_id = 2;
  optional uint32 xid = 3;
  optional uint32 op = 4;
  optional uint64 error = 5;
}
message NfsCbBadprincFtraceEvent {
  optional uint32 xid = 1;
  optional uint32 cbident = 2;
}
message NfsCbNoClpFtraceEvent {
  optional uint32 xid = 1;
  optional uint32 cbident = 2;
}
message PnfsMdsFallbackPgGetMirrorCountFtraceEvent {
  optional uint64 dev = 1;
  optional uint64 fileid = 2;
  optional uint32 fhandle = 3;
  optional int64 pos = 4;
  optional uint64 count = 5;
  optional uint32 iomode = 6;
  optional int32 layoutstateid_seq = 7;
  optional uint32 layoutstateid_hash = 8;
  optional int64 lseg = 9;
}
message PnfsMdsFallbackPgInitReadFtraceEvent {
  optional uint64 dev = 1;
  optional uint64 fileid = 2;
  optional uint32 fhandle = 3;
  optional int64 pos = 4;
  optional uint64 count = 5;
  optional uint32 iomode = 6;
  optional int32 layoutstateid_seq = 7;
  optional uint32 layoutstateid_hash = 8;
  optional int64 lseg = 9;
}
message PnfsMdsFallbackPgInitWriteFtraceEvent {
  optional uint64 dev = 1;
  optional uint64 fileid = 2;
  optional uint32 fhandle = 3;
  optional int64 pos = 4;
  optional uint64 count = 5;
  optional uint32 iomode = 6;
  optional int32 layoutstateid_seq = 7;
  optional uint32 layoutstateid_hash = 8;
  optional int64 lseg = 9;
}
message PnfsMdsFallbackReadDoneFtraceEvent {
  optional uint64 dev = 1;
  optional uint64 fileid = 2;
  optional uint32 fhandle = 3;
  optional int64 pos = 4;
  optional uint64 count = 5;
  optional uint32 iomode = 6;
  optional int32 layoutstateid_seq = 7;
  optional uint32 layoutstateid_hash = 8;
  optional int64 lseg = 9;
}
message PnfsMdsFallbackReadPagelistFtraceEvent {
  optional uint64 dev = 1;
  optional uint64 fileid = 2;
  optional uint32 fhandle = 3;
  optional int64 pos = 4;
  optional uint64 count = 5;
  optional uint32 iomode = 6;
  optional int32 layoutstateid_seq = 7;
  optional uint32 layoutstateid_hash = 8;
  optional int64 lseg = 9;
}
message PnfsMdsFallbackWriteDoneFtraceEvent {
  optional uint64 dev = 1;
  optional uint64 fileid = 2;
  optional uint32 fhandle = 3;
  optional int64 pos = 4;
  optional uint64 count = 5;
  optional uint32 iomode = 6;
  optional int32 layoutstateid_seq = 7;
  optional uint32 layoutstateid_hash = 8;
  optional int64 lseg = 9;
}
message PnfsMdsFallbackWritePagelistFtraceEvent {
  optional uint64 dev = 1;
  optional uint64 fileid = 2;
  optional uint32 fhandle = 3;
  optional int64 pos = 4;
  optional uint64 count = 5;
  optional uint32 iomode = 6;
  optional int32 layoutstateid_seq = 7;
  optional uint32 layoutstateid_hash = 8;
  optional int64 lseg = 9;
}
message PnfsUpdateLayoutFtraceEvent {
  optional uint64 dev = 1;
  optional uint64 fileid = 2;
  optional uint32 fhandle = 3;
  optional int64 pos = 4;
  optional uint64 count = 5;
  optional uint32 iomode = 6;
  optional int32 layoutstateid_seq = 7;
  optional uint32 layoutstateid_hash = 8;
  optional int64 lseg = 9;
  optional uint32 reason = 10;
}
