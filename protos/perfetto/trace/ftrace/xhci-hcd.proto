// Autogenerated by:
// ../../src/tools/ftrace_proto_gen/ftrace_proto_gen.cc
// Do not edit.

syntax = "proto2";
package perfetto.protos;

message XhciAddEndpointFtraceEvent {
  optional uint32 info = 1;
  optional uint32 info2 = 2;
  optional uint64 deq = 3;
  optional uint32 tx_info = 4;
  optional string str = 5;
}
message XhciAddressCtrlCtxFtraceEvent {
  optional uint32 drop = 1;
  optional uint32 add = 2;
  optional string str = 3;
}
message XhciAddressCtxFtraceEvent {
  optional int32 ctx_64 = 1;
  optional uint32 ctx_type = 2;
  optional uint64 ctx_dma = 3;
  optional uint64 ctx_va = 4;
  optional uint32 ctx_ep_num = 5;
  optional int32 slot_id = 6;
  optional uint32 ctx_data = 7;
}
message XhciAllocDevFtraceEvent {
  optional uint32 info = 1;
  optional uint32 info2 = 2;
  optional uint32 tt_info = 3;
  optional uint32 state = 4;
  optional string str = 5;
}
message XhciAllocVirtDeviceFtraceEvent {
  optional uint64 vdev = 1;
  optional uint64 out_ctx = 2;
  optional uint64 in_ctx = 3;
  optional int32 devnum = 4;
  optional int32 state = 5;
  optional int32 speed = 6;
  optional uint32 portnum = 7;
  optional uint32 level = 8;
  optional int32 slot_id = 9;
}
message XhciConfigureEndpointFtraceEvent {
  optional uint32 info = 1;
  optional uint32 info2 = 2;
  optional uint32 tt_info = 3;
  optional uint32 state = 4;
  optional string str = 5;
}
message XhciConfigureEndpointCtrlCtxFtraceEvent {
  optional uint32 drop = 1;
  optional uint32 add = 2;
  optional string str = 3;
}
message XhciDbcAllocRequestFtraceEvent {
  optional uint64 req = 1;
  optional uint32 dir = 2;
  optional uint32 actual = 3;
  optional uint32 length = 4;
  optional int32 status = 5;
}
message XhciDbcFreeRequestFtraceEvent {
  optional uint64 req = 1;
  optional uint32 dir = 2;
  optional uint32 actual = 3;
  optional uint32 length = 4;
  optional int32 status = 5;
}
message XhciDbcGadgetEpQueueFtraceEvent {
  optional uint32 type = 1;
  optional uint32 field0 = 2;
  optional uint32 field1 = 3;
  optional uint32 field2 = 4;
  optional uint32 field3 = 5;
  optional string str = 6;
}
message XhciDbcGivebackRequestFtraceEvent {
  optional uint64 req = 1;
  optional uint32 dir = 2;
  optional uint32 actual = 3;
  optional uint32 length = 4;
  optional int32 status = 5;
}
message XhciDbcHandleEventFtraceEvent {
  optional uint32 type = 1;
  optional uint32 field0 = 2;
  optional uint32 field1 = 3;
  optional uint32 field2 = 4;
  optional uint32 field3 = 5;
  optional string str = 6;
}
message XhciDbcHandleTransferFtraceEvent {
  optional uint32 type = 1;
  optional uint32 field0 = 2;
  optional uint32 field1 = 3;
  optional uint32 field2 = 4;
  optional uint32 field3 = 5;
  optional string str = 6;
}
message XhciDbcQueueRequestFtraceEvent {
  optional uint64 req = 1;
  optional uint32 dir = 2;
  optional uint32 actual = 3;
  optional uint32 length = 4;
  optional int32 status = 5;
}
message XhciDbgAddressFtraceEvent {
  optional string msg = 1;
}
message XhciDbgCancelUrbFtraceEvent {
  optional string msg = 1;
}
message XhciDbgContextChangeFtraceEvent {
  optional string msg = 1;
}
message XhciDbgInitFtraceEvent {
  optional string msg = 1;
}
message XhciDbgQuirksFtraceEvent {
  optional string msg = 1;
}
message XhciDbgResetEpFtraceEvent {
  optional string msg = 1;
}
message XhciDbgRingExpansionFtraceEvent {
  optional string msg = 1;
}
message XhciDiscoverOrResetDeviceFtraceEvent {
  optional uint32 info = 1;
  optional uint32 info2 = 2;
  optional uint32 tt_info = 3;
  optional uint32 state = 4;
  optional string str = 5;
}
message XhciFreeDevFtraceEvent {
  optional uint32 info = 1;
  optional uint32 info2 = 2;
  optional uint32 tt_info = 3;
  optional uint32 state = 4;
  optional string str = 5;
}
message XhciFreeVirtDeviceFtraceEvent {
  optional uint64 vdev = 1;
  optional uint64 out_ctx = 2;
  optional uint64 in_ctx = 3;
  optional uint32 fake_port = 4;
  optional uint32 real_port = 5;
  optional uint32 current_mel = 6;
}
message XhciGetPortStatusFtraceEvent {
  optional uint32 portnum = 1;
  optional uint32 portsc = 2;
  optional string str = 3;
}
message XhciHandleCmdAddrDevFtraceEvent {
  optional uint32 info = 1;
  optional uint32 info2 = 2;
  optional uint32 tt_info = 3;
  optional uint32 state = 4;
  optional string str = 5;
}
message XhciHandleCmdConfigEpFtraceEvent {
  optional uint32 info = 1;
  optional uint32 info2 = 2;
  optional uint64 deq = 3;
  optional uint32 tx_info = 4;
  optional string str = 5;
}
message XhciHandleCmdDisableSlotFtraceEvent {
  optional uint32 info = 1;
  optional uint32 info2 = 2;
  optional uint32 tt_info = 3;
  optional uint32 state = 4;
  optional string str = 5;
}
message XhciHandleCmdResetDevFtraceEvent {
  optional uint32 info = 1;
  optional uint32 info2 = 2;
  optional uint32 tt_info = 3;
  optional uint32 state = 4;
  optional string str = 5;
}
message XhciHandleCmdResetEpFtraceEvent {
  optional uint32 info = 1;
  optional uint32 info2 = 2;
  optional uint64 deq = 3;
  optional uint32 tx_info = 4;
  optional string str = 5;
}
message XhciHandleCmdSetDeqFtraceEvent {
  optional uint32 info = 1;
  optional uint32 info2 = 2;
  optional uint32 tt_info = 3;
  optional uint32 state = 4;
  optional string str = 5;
}
message XhciHandleCmdSetDeqEpFtraceEvent {
  optional uint32 info = 1;
  optional uint32 info2 = 2;
  optional uint64 deq = 3;
  optional uint32 tx_info = 4;
  optional string str = 5;
}
message XhciHandleCmdStopEpFtraceEvent {
  optional uint32 info = 1;
  optional uint32 info2 = 2;
  optional uint64 deq = 3;
  optional uint32 tx_info = 4;
  optional string str = 5;
}
message XhciHandleCommandFtraceEvent {
  optional uint32 type = 1;
  optional uint32 field0 = 2;
  optional uint32 field1 = 3;
  optional uint32 field2 = 4;
  optional uint32 field3 = 5;
  optional string str = 6;
}
message XhciHandleEventFtraceEvent {
  optional uint32 type = 1;
  optional uint32 field0 = 2;
  optional uint32 field1 = 3;
  optional uint32 field2 = 4;
  optional uint32 field3 = 5;
  optional string str = 6;
}
message XhciHandlePortStatusFtraceEvent {
  optional uint32 portnum = 1;
  optional uint32 portsc = 2;
  optional string str = 3;
}
message XhciHandleTransferFtraceEvent {
  optional uint32 type = 1;
  optional uint32 field0 = 2;
  optional uint32 field1 = 3;
  optional uint32 field2 = 4;
  optional uint32 field3 = 5;
  optional string str = 6;
}
message XhciHubStatusDataFtraceEvent {
  optional uint32 portnum = 1;
  optional uint32 portsc = 2;
  optional string str = 3;
}
message XhciIncDeqFtraceEvent {
  optional uint32 type = 1;
  optional uint64 ring = 2;
  optional uint64 enq = 3;
  optional uint64 deq = 4;
  optional uint64 enq_seg = 5;
  optional uint64 deq_seg = 6;
  optional uint32 num_segs = 7;
  optional uint32 stream_id = 8;
  optional uint32 cycle_state = 9;
  optional uint32 num_trbs_free = 10;
  optional uint32 bounce_buf_len = 11;
}
message XhciIncEnqFtraceEvent {
  optional uint32 type = 1;
  optional uint64 ring = 2;
  optional uint64 enq = 3;
  optional uint64 deq = 4;
  optional uint64 enq_seg = 5;
  optional uint64 deq_seg = 6;
  optional uint32 num_segs = 7;
  optional uint32 stream_id = 8;
  optional uint32 cycle_state = 9;
  optional uint32 num_trbs_free = 10;
  optional uint32 bounce_buf_len = 11;
}
message XhciQueueTrbFtraceEvent {
  optional uint32 type = 1;
  optional uint32 field0 = 2;
  optional uint32 field1 = 3;
  optional uint32 field2 = 4;
  optional uint32 field3 = 5;
  optional string str = 6;
}
message XhciRingAllocFtraceEvent {
  optional uint32 type = 1;
  optional uint64 ring = 2;
  optional uint64 enq = 3;
  optional uint64 deq = 4;
  optional uint64 enq_seg = 5;
  optional uint64 deq_seg = 6;
  optional uint32 num_segs = 7;
  optional uint32 stream_id = 8;
  optional uint32 cycle_state = 9;
  optional uint32 num_trbs_free = 10;
  optional uint32 bounce_buf_len = 11;
}
message XhciRingEpDoorbellFtraceEvent {
  optional uint32 slot = 1;
  optional uint32 doorbell = 2;
  optional string str = 3;
}
message XhciRingExpansionFtraceEvent {
  optional uint32 type = 1;
  optional uint64 ring = 2;
  optional uint64 enq = 3;
  optional uint64 deq = 4;
  optional uint64 enq_seg = 5;
  optional uint64 deq_seg = 6;
  optional uint32 num_segs = 7;
  optional uint32 stream_id = 8;
  optional uint32 cycle_state = 9;
  optional uint32 num_trbs_free = 10;
  optional uint32 bounce_buf_len = 11;
}
message XhciRingFreeFtraceEvent {
  optional uint32 type = 1;
  optional uint64 ring = 2;
  optional uint64 enq = 3;
  optional uint64 deq = 4;
  optional uint64 enq_seg = 5;
  optional uint64 deq_seg = 6;
  optional uint32 num_segs = 7;
  optional uint32 stream_id = 8;
  optional uint32 cycle_state = 9;
  optional uint32 num_trbs_free = 10;
  optional uint32 bounce_buf_len = 11;
}
message XhciRingHostDoorbellFtraceEvent {
  optional uint32 slot = 1;
  optional uint32 doorbell = 2;
  optional string str = 3;
}
message XhciSetupAddressableVirtDeviceFtraceEvent {
  optional uint64 vdev = 1;
  optional uint64 out_ctx = 2;
  optional uint64 in_ctx = 3;
  optional int32 devnum = 4;
  optional int32 state = 5;
  optional int32 speed = 6;
  optional uint32 portnum = 7;
  optional uint32 level = 8;
  optional int32 slot_id = 9;
}
message XhciSetupDeviceFtraceEvent {
  optional uint64 vdev = 1;
  optional uint64 out_ctx = 2;
  optional uint64 in_ctx = 3;
  optional int32 devnum = 4;
  optional int32 state = 5;
  optional int32 speed = 6;
  optional uint32 portnum = 7;
  optional uint32 level = 8;
  optional int32 slot_id = 9;
}
message XhciSetupDeviceSlotFtraceEvent {
  optional uint32 info = 1;
  optional uint32 info2 = 2;
  optional uint32 tt_info = 3;
  optional uint32 state = 4;
  optional string str = 5;
}
message XhciStopDeviceFtraceEvent {
  optional uint64 vdev = 1;
  optional uint64 out_ctx = 2;
  optional uint64 in_ctx = 3;
  optional int32 devnum = 4;
  optional int32 state = 5;
  optional int32 speed = 6;
  optional uint32 portnum = 7;
  optional uint32 level = 8;
  optional int32 slot_id = 9;
}
message XhciUrbDequeueFtraceEvent {
  optional uint64 urb = 1;
  optional uint32 pipe = 2;
  optional uint32 stream = 3;
  optional int32 status = 4;
  optional uint32 flags = 5;
  optional int32 num_mapped_sgs = 6;
  optional int32 num_sgs = 7;
  optional int32 length = 8;
  optional int32 actual = 9;
  optional int32 epnum = 10;
  optional int32 dir_in = 11;
  optional int32 type = 12;
  optional int32 slot_id = 13;
}
message XhciUrbEnqueueFtraceEvent {
  optional uint64 urb = 1;
  optional uint32 pipe = 2;
  optional uint32 stream = 3;
  optional int32 status = 4;
  optional uint32 flags = 5;
  optional int32 num_mapped_sgs = 6;
  optional int32 num_sgs = 7;
  optional int32 length = 8;
  optional int32 actual = 9;
  optional int32 epnum = 10;
  optional int32 dir_in = 11;
  optional int32 type = 12;
  optional int32 slot_id = 13;
}
message XhciUrbGivebackFtraceEvent {
  optional uint64 urb = 1;
  optional uint32 pipe = 2;
  optional uint32 stream = 3;
  optional int32 status = 4;
  optional uint32 flags = 5;
  optional int32 num_mapped_sgs = 6;
  optional int32 num_sgs = 7;
  optional int32 length = 8;
  optional int32 actual = 9;
  optional int32 epnum = 10;
  optional int32 dir_in = 11;
  optional int32 type = 12;
  optional int32 slot_id = 13;
}
