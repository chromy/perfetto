// Autogenerated by:
// ../../src/tools/ftrace_proto_gen/ftrace_proto_gen.cc
// Do not edit.

syntax = "proto2";
package perfetto.protos;

message CachefilesCoherencyFtraceEvent {
  optional uint32 obj = 1;
  optional uint32 why = 2;
  optional uint32 content = 3;
  optional uint64 ino = 4;
}
message CachefilesIoErrorFtraceEvent {
  optional uint32 obj = 1;
  optional uint32 backer = 2;
  optional uint32 where = 3;
  optional int32 error = 4;
}
message CachefilesLinkFtraceEvent {
  optional uint32 obj = 1;
  optional uint32 backer = 2;
}
message CachefilesLookupFtraceEvent {
  optional uint32 obj = 1;
  optional int32 error = 2;
  optional uint64 dino = 3;
  optional uint64 ino = 4;
}
message CachefilesMarkActiveFtraceEvent {
  optional uint32 obj = 1;
  optional uint64 inode = 2;
}
message CachefilesMarkFailedFtraceEvent {
  optional uint32 obj = 1;
  optional uint64 inode = 2;
}
message CachefilesMarkInactiveFtraceEvent {
  optional uint32 obj = 1;
  optional uint64 inode = 2;
}
message CachefilesMkdirFtraceEvent {
  optional uint32 dir = 1;
  optional uint32 subdir = 2;
}
message CachefilesOndemandCloseFtraceEvent {
  optional uint32 obj = 1;
  optional uint32 msg_id = 2;
  optional uint32 object_id = 3;
}
message CachefilesOndemandCopenFtraceEvent {
  optional uint32 obj = 1;
  optional uint32 msg_id = 2;
  optional int64 len = 3;
}
message CachefilesOndemandCreadFtraceEvent {
  optional uint32 obj = 1;
  optional uint32 msg_id = 2;
}
message CachefilesOndemandFdReleaseFtraceEvent {
  optional uint32 obj = 1;
  optional uint32 object_id = 2;
}
message CachefilesOndemandFdWriteFtraceEvent {
  optional uint32 obj = 1;
  optional uint32 backer = 2;
  optional int64 start = 3;
  optional uint64 len = 4;
}
message CachefilesOndemandOpenFtraceEvent {
  optional uint32 obj = 1;
  optional uint32 msg_id = 2;
  optional uint32 object_id = 3;
  optional uint32 fd = 4;
  optional uint32 flags = 5;
}
message CachefilesOndemandReadFtraceEvent {
  optional uint32 obj = 1;
  optional uint32 msg_id = 2;
  optional uint32 object_id = 3;
  optional int64 start = 4;
  optional uint64 len = 5;
}
message CachefilesPrepReadFtraceEvent {
  optional uint32 rreq = 1;
  optional uint32 index = 2;
  optional uint32 flags = 3;
  optional uint32 source = 4;
  optional uint32 why = 5;
  optional uint64 len = 6;
  optional int64 start = 7;
  optional uint32 netfs_inode = 8;
  optional uint32 cache_inode = 9;
}
message CachefilesReadFtraceEvent {
  optional uint32 obj = 1;
  optional uint32 backer = 2;
  optional uint64 len = 3;
  optional int64 start = 4;
}
message CachefilesRefFtraceEvent {
  optional uint32 obj = 1;
  optional uint32 cookie = 2;
  optional uint32 why = 3;
  optional int32 usage = 4;
}
message CachefilesRenameFtraceEvent {
  optional uint32 obj = 1;
  optional uint32 ino = 2;
  optional uint32 why = 3;
}
message CachefilesTmpfileFtraceEvent {
  optional uint32 obj = 1;
  optional uint32 backer = 2;
}
message CachefilesTruncFtraceEvent {
  optional uint32 obj = 1;
  optional uint32 backer = 2;
  optional uint32 why = 3;
  optional int64 from = 4;
  optional int64 to = 5;
}
message CachefilesUnlinkFtraceEvent {
  optional uint32 obj = 1;
  optional uint32 ino = 2;
  optional uint32 why = 3;
}
message CachefilesVfsErrorFtraceEvent {
  optional uint32 obj = 1;
  optional uint32 backer = 2;
  optional uint32 where = 3;
  optional int32 error = 4;
}
message CachefilesVolCoherencyFtraceEvent {
  optional uint32 vol = 1;
  optional uint32 why = 2;
  optional uint64 ino = 3;
}
message CachefilesWriteFtraceEvent {
  optional uint32 obj = 1;
  optional uint32 backer = 2;
  optional uint64 len = 3;
  optional int64 start = 4;
}
