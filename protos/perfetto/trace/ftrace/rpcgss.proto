// Autogenerated by:
// ../../src/tools/ftrace_proto_gen/ftrace_proto_gen.cc
// Do not edit.

syntax = "proto2";
package perfetto.protos;

message RpcgssBadSeqnoFtraceEvent {
  optional uint32 task_id = 1;
  optional uint32 client_id = 2;
  optional uint32 expected = 3;
  optional uint32 received = 4;
}
message RpcgssContextFtraceEvent {
  optional uint64 expiry = 1;
  optional uint64 now = 2;
  optional uint32 timeout = 3;
  optional uint32 window_size = 4;
  optional int32 len = 5;
  optional string acceptor = 6;
}
message RpcgssCreateauthFtraceEvent {
  optional uint32 flavor = 1;
  optional int32 error = 2;
}
message RpcgssCtxDestroyFtraceEvent {
  optional uint64 cred = 1;
  optional uint64 service = 2;
  optional string principal = 3;
}
message RpcgssCtxInitFtraceEvent {
  optional uint64 cred = 1;
  optional uint64 service = 2;
  optional string principal = 3;
}
message RpcgssGetMicFtraceEvent {
  optional uint32 task_id = 1;
  optional uint32 client_id = 2;
  optional uint32 maj_stat = 3;
}
message RpcgssImportCtxFtraceEvent {
  optional int32 status = 1;
}
message RpcgssNeedReencodeFtraceEvent {
  optional uint32 task_id = 1;
  optional uint32 client_id = 2;
  optional uint32 xid = 3;
  optional uint32 seq_xmit = 4;
  optional uint32 seqno = 5;
  optional uint32 ret = 6;
}
message RpcgssOidToMechFtraceEvent {
  optional string oid = 1;
}
message RpcgssSeqnoFtraceEvent {
  optional uint32 task_id = 1;
  optional uint32 client_id = 2;
  optional uint32 xid = 3;
  optional uint32 seqno = 4;
}
message RpcgssSvcAcceptUpcallFtraceEvent {
  optional uint32 minor_status = 1;
  optional uint64 major_status = 2;
  optional uint32 xid = 3;
  optional string addr = 4;
}
message RpcgssSvcAuthenticateFtraceEvent {
  optional uint32 seqno = 1;
  optional uint32 xid = 2;
  optional string addr = 3;
}
message RpcgssSvcMicFtraceEvent {
  optional uint32 xid = 1;
  optional uint32 maj_stat = 2;
  optional string addr = 3;
}
message RpcgssSvcSeqnoBadFtraceEvent {
  optional uint32 expected = 1;
  optional uint32 received = 2;
  optional uint32 xid = 3;
  optional string addr = 4;
}
message RpcgssSvcSeqnoLargeFtraceEvent {
  optional uint32 xid = 1;
  optional uint32 seqno = 2;
}
message RpcgssSvcSeqnoLowFtraceEvent {
  optional uint32 xid = 1;
  optional uint32 seqno = 2;
  optional uint32 min = 3;
  optional uint32 max = 4;
}
message RpcgssSvcSeqnoSeenFtraceEvent {
  optional uint32 xid = 1;
  optional uint32 seqno = 2;
}
message RpcgssSvcUnwrapFtraceEvent {
  optional uint32 xid = 1;
  optional uint32 maj_stat = 2;
  optional string addr = 3;
}
message RpcgssSvcUnwrapFailedFtraceEvent {
  optional uint32 xid = 1;
  optional string addr = 2;
}
message RpcgssUnwrapFtraceEvent {
  optional uint32 task_id = 1;
  optional uint32 client_id = 2;
  optional uint32 maj_stat = 3;
}
message RpcgssUnwrapFailedFtraceEvent {
  optional uint32 task_id = 1;
  optional uint32 client_id = 2;
}
message RpcgssUpcallMsgFtraceEvent {
  optional string msg = 1;
}
message RpcgssUpcallResultFtraceEvent {
  optional uint32 uid = 1;
  optional int32 result = 2;
}
message RpcgssUpdateSlackFtraceEvent {
  optional uint32 task_id = 1;
  optional uint32 client_id = 2;
  optional uint32 xid = 3;
  optional uint64 auth = 4;
  optional uint32 rslack = 5;
  optional uint32 ralign = 6;
  optional uint32 verfsize = 7;
}
message RpcgssVerifyMicFtraceEvent {
  optional uint32 task_id = 1;
  optional uint32 client_id = 2;
  optional uint32 maj_stat = 3;
}
message RpcgssWrapFtraceEvent {
  optional uint32 task_id = 1;
  optional uint32 client_id = 2;
  optional uint32 maj_stat = 3;
}
