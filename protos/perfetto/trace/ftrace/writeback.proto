// Autogenerated by:
// ../../src/tools/ftrace_proto_gen/ftrace_proto_gen.cc
// Do not edit.

syntax = "proto2";
package perfetto.protos;

message BalanceDirtyPagesFtraceEvent {
  optional string bdi = 1;
  optional uint64 limit = 2;
  optional uint64 setpoint = 3;
  optional uint64 dirty = 4;
  optional uint64 bdi_setpoint = 5;
  optional uint64 bdi_dirty = 6;
  optional uint64 dirty_ratelimit = 7;
  optional uint64 task_ratelimit = 8;
  optional uint32 dirtied = 9;
  optional uint32 dirtied_pause = 10;
  optional uint64 paused = 11;
  optional int64 pause = 12;
  optional uint64 period = 13;
  optional int64 think = 14;
  optional uint64 cgroup_ino = 15;
  optional string cgroup = 16;
}
message BdiDirtyRatelimitFtraceEvent {
  optional string bdi = 1;
  optional uint64 write_bw = 2;
  optional uint64 avg_write_bw = 3;
  optional uint64 dirty_rate = 4;
  optional uint64 dirty_ratelimit = 5;
  optional uint64 task_ratelimit = 6;
  optional uint64 balanced_dirty_ratelimit = 7;
  optional uint64 cgroup_ino = 8;
  optional string cgroup = 9;
}
message FlushForeignFtraceEvent {
  optional string name = 1;
  optional uint64 cgroup_ino = 2;
  optional uint32 frn_bdi_id = 3;
  optional uint32 frn_memcg_id = 4;
}
message FolioWaitWritebackFtraceEvent {
  optional string name = 1;
  optional uint64 ino = 2;
  optional uint64 index = 3;
}
message GlobalDirtyStateFtraceEvent {
  optional uint64 nr_dirty = 1;
  optional uint64 nr_writeback = 2;
  optional uint64 nr_unstable = 3;
  optional uint64 background_thresh = 4;
  optional uint64 dirty_thresh = 5;
  optional uint64 dirty_limit = 6;
  optional uint64 nr_dirtied = 7;
  optional uint64 nr_written = 8;
}
message InodeForeignHistoryFtraceEvent {
  optional string name = 1;
  optional uint64 ino = 2;
  optional uint64 cgroup_ino = 3;
  optional uint32 history = 4;
}
message InodeSwitchWbsFtraceEvent {
  optional string name = 1;
  optional uint64 ino = 2;
  optional uint64 old_cgroup_ino = 3;
  optional uint64 new_cgroup_ino = 4;
}
message SbClearInodeWritebackFtraceEvent {
  optional uint64 dev = 1;
  optional uint64 ino = 2;
  optional uint64 state = 3;
  optional uint32 mode = 4;
  optional uint64 dirtied_when = 5;
}
message SbMarkInodeWritebackFtraceEvent {
  optional uint64 dev = 1;
  optional uint64 ino = 2;
  optional uint64 state = 3;
  optional uint32 mode = 4;
  optional uint64 dirtied_when = 5;
}
message TrackForeignDirtyFtraceEvent {
  optional string name = 1;
  optional uint64 bdi_id = 2;
  optional uint64 ino = 3;
  optional uint32 memcg_id = 4;
  optional uint64 cgroup_ino = 5;
  optional uint64 page_cgroup_ino = 6;
}
message WbcWritepageFtraceEvent {
  optional string name = 1;
  optional int64 nr_to_write = 2;
  optional int64 pages_skipped = 3;
  optional int32 sync_mode = 4;
  optional int32 for_kupdate = 5;
  optional int32 for_background = 6;
  optional int32 for_reclaim = 7;
  optional int32 range_cyclic = 8;
  optional int64 range_start = 9;
  optional int64 range_end = 10;
  optional uint64 cgroup_ino = 11;
  optional string cgroup = 12;
}
message WritebackBdiRegisterFtraceEvent {
  optional string name = 1;
}
message WritebackDirtyFolioFtraceEvent {
  optional string name = 1;
  optional uint64 ino = 2;
  optional uint64 index = 3;
}
message WritebackDirtyInodeFtraceEvent {
  optional string name = 1;
  optional uint64 ino = 2;
  optional uint64 flags = 3;
  optional uint64 state = 4;
}
message WritebackDirtyInodeEnqueueFtraceEvent {
  optional uint64 dev = 1;
  optional uint64 ino = 2;
  optional uint64 state = 3;
  optional uint32 mode = 4;
  optional uint64 dirtied_when = 5;
}
message WritebackDirtyInodeStartFtraceEvent {
  optional string name = 1;
  optional uint64 ino = 2;
  optional uint64 flags = 3;
  optional uint64 state = 4;
}
message WritebackExecFtraceEvent {
  optional string name = 1;
  optional int64 nr_pages = 2;
  optional uint64 sb_dev = 3;
  optional int32 sync_mode = 4;
  optional int32 for_kupdate = 5;
  optional int32 range_cyclic = 6;
  optional int32 for_background = 7;
  optional int32 reason = 8;
  optional uint64 cgroup_ino = 9;
  optional string cgroup = 10;
}
message WritebackLazytimeFtraceEvent {
  optional uint64 dev = 1;
  optional uint64 ino = 2;
  optional uint64 state = 3;
  optional uint32 mode = 4;
  optional uint64 dirtied_when = 5;
}
message WritebackLazytimeIputFtraceEvent {
  optional uint64 dev = 1;
  optional uint64 ino = 2;
  optional uint64 state = 3;
  optional uint32 mode = 4;
  optional uint64 dirtied_when = 5;
}
message WritebackMarkInodeDirtyFtraceEvent {
  optional string name = 1;
  optional uint64 ino = 2;
  optional uint64 state = 3;
  optional uint64 flags = 4;
}
message WritebackPagesWrittenFtraceEvent {
  optional int64 pages = 1;
}
message WritebackQueueFtraceEvent {
  optional string name = 1;
  optional int64 nr_pages = 2;
  optional uint64 sb_dev = 3;
  optional int32 sync_mode = 4;
  optional int32 for_kupdate = 5;
  optional int32 range_cyclic = 6;
  optional int32 for_background = 7;
  optional int32 reason = 8;
  optional uint64 cgroup_ino = 9;
  optional string cgroup = 10;
}
message WritebackQueueIoFtraceEvent {
  optional string name = 1;
  optional uint64 older = 2;
  optional int64 age = 3;
  optional int32 moved = 4;
  optional int32 reason = 5;
  optional uint64 cgroup_ino = 6;
  optional string cgroup = 7;
}
message WritebackSbInodesRequeueFtraceEvent {
  optional string name = 1;
  optional uint64 ino = 2;
  optional uint64 state = 3;
  optional uint64 dirtied_when = 4;
  optional uint64 cgroup_ino = 5;
  optional string cgroup = 6;
}
message WritebackSingleInodeFtraceEvent {
  optional string name = 1;
  optional uint64 ino = 2;
  optional uint64 state = 3;
  optional uint64 dirtied_when = 4;
  optional uint64 writeback_index = 5;
  optional int64 nr_to_write = 6;
  optional uint64 wrote = 7;
  optional uint64 cgroup_ino = 8;
  optional string cgroup = 9;
}
message WritebackSingleInodeStartFtraceEvent {
  optional string name = 1;
  optional uint64 ino = 2;
  optional uint64 state = 3;
  optional uint64 dirtied_when = 4;
  optional uint64 writeback_index = 5;
  optional int64 nr_to_write = 6;
  optional uint64 wrote = 7;
  optional uint64 cgroup_ino = 8;
  optional string cgroup = 9;
}
message WritebackStartFtraceEvent {
  optional string name = 1;
  optional int64 nr_pages = 2;
  optional uint64 sb_dev = 3;
  optional int32 sync_mode = 4;
  optional int32 for_kupdate = 5;
  optional int32 range_cyclic = 6;
  optional int32 for_background = 7;
  optional int32 reason = 8;
  optional uint64 cgroup_ino = 9;
  optional string cgroup = 10;
}
message WritebackWaitFtraceEvent {
  optional string name = 1;
  optional int64 nr_pages = 2;
  optional uint64 sb_dev = 3;
  optional int32 sync_mode = 4;
  optional int32 for_kupdate = 5;
  optional int32 range_cyclic = 6;
  optional int32 for_background = 7;
  optional int32 reason = 8;
  optional uint64 cgroup_ino = 9;
  optional string cgroup = 10;
}
message WritebackWakeBackgroundFtraceEvent {
  optional string name = 1;
  optional uint64 cgroup_ino = 2;
  optional string cgroup = 3;
}
message WritebackWriteInodeFtraceEvent {
  optional string name = 1;
  optional uint64 ino = 2;
  optional int32 sync_mode = 3;
  optional uint64 cgroup_ino = 4;
  optional string cgroup = 5;
}
message WritebackWriteInodeStartFtraceEvent {
  optional string name = 1;
  optional uint64 ino = 2;
  optional int32 sync_mode = 3;
  optional uint64 cgroup_ino = 4;
  optional string cgroup = 5;
}
message WritebackWrittenFtraceEvent {
  optional string name = 1;
  optional int64 nr_pages = 2;
  optional uint64 sb_dev = 3;
  optional int32 sync_mode = 4;
  optional int32 for_kupdate = 5;
  optional int32 range_cyclic = 6;
  optional int32 for_background = 7;
  optional int32 reason = 8;
  optional uint64 cgroup_ino = 9;
  optional string cgroup = 10;
}
