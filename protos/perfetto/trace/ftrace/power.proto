// Autogenerated by:
// ../../src/tools/ftrace_proto_gen/ftrace_proto_gen.cc
// Do not edit.

syntax = "proto2";
package perfetto.protos;

message CpuFrequencyFtraceEvent {
  optional uint32 state = 1;
  optional uint32 cpu_id = 2;
}
message CpuFrequencyLimitsFtraceEvent {
  optional uint32 min_freq = 1;
  optional uint32 max_freq = 2;
  optional uint32 cpu_id = 3;
}
message CpuIdleFtraceEvent {
  optional uint32 state = 1;
  optional uint32 cpu_id = 2;
}
message ClockEnableFtraceEvent {
  optional string name = 1;
  optional uint64 state = 2;
  optional uint64 cpu_id = 3;
}
message ClockDisableFtraceEvent {
  optional string name = 1;
  optional uint64 state = 2;
  optional uint64 cpu_id = 3;
}
message ClockSetRateFtraceEvent {
  optional string name = 1;
  optional uint64 state = 2;
  optional uint64 cpu_id = 3;
}
message SuspendResumeFtraceEvent {
  optional string action = 1;
  optional int32 val = 2;
  optional uint32 start = 3;
}
message GpuFrequencyFtraceEvent {
  optional uint32 gpu_id = 1;
  optional uint32 state = 2;
}
message WakeupSourceActivateFtraceEvent {
  optional string name = 1;
  optional uint64 state = 2;
}
message WakeupSourceDeactivateFtraceEvent {
  optional string name = 1;
  optional uint64 state = 2;
}
message CpuIdleMissFtraceEvent {
  optional uint32 cpu_id = 1;
  optional uint32 state = 2;
  optional uint32 below = 3;
}
message DevicePmCallbackEndFtraceEvent {
  optional string device = 1;
  optional string driver = 2;
  optional int32 error = 3;
}
message DevicePmCallbackStartFtraceEvent {
  optional string device = 1;
  optional string driver = 2;
  optional string parent = 3;
  optional string pm_ops = 4;
  optional int32 event = 5;
}
message DevPmQosAddRequestFtraceEvent {
  optional string name = 1;
  optional uint32 type = 2;
  optional int32 new_value = 3;
}
message DevPmQosRemoveRequestFtraceEvent {
  optional string name = 1;
  optional uint32 type = 2;
  optional int32 new_value = 3;
}
message DevPmQosUpdateRequestFtraceEvent {
  optional string name = 1;
  optional uint32 type = 2;
  optional int32 new_value = 3;
}
message GuestHaltPollNsFtraceEvent {
  optional uint32 grow = 1;
  optional uint32 old = 3;
}
message PmQosAddRequestFtraceEvent {
  optional int32 value = 1;
  optional int32 pm_qos_class = 2;
}
message PmQosRemoveRequestFtraceEvent {
  optional int32 value = 1;
  optional int32 pm_qos_class = 2;
}
message PmQosUpdateFlagsFtraceEvent {
  optional uint32 action = 1;
  optional int32 prev_value = 2;
  optional int32 curr_value = 3;
}
message PmQosUpdateRequestFtraceEvent {
  optional int32 value = 1;
  optional int32 pm_qos_class = 2;
}
message PmQosUpdateTargetFtraceEvent {
  optional uint32 action = 1;
  optional int32 prev_value = 2;
  optional int32 curr_value = 3;
}
message PowerDomainTargetFtraceEvent {
  optional string name = 1;
  optional uint64 state = 2;
  optional uint64 cpu_id = 3;
}
message PowernvThrottleFtraceEvent {
  optional int32 chip_id = 1;
  optional string reason = 2;
  optional int32 pmax = 3;
}
message PstateSampleFtraceEvent {
  optional uint32 core_busy = 1;
  optional uint32 scaled_busy = 2;
  optional uint32 from = 3;
  optional uint32 to = 4;
  optional uint64 mperf = 5;
  optional uint64 aperf = 6;
  optional uint64 tsc = 7;
  optional uint32 freq = 8;
  optional uint32 io_boost = 9;
}
