// Autogenerated by:
// ../../src/tools/ftrace_proto_gen/ftrace_proto_gen.cc
// Do not edit.

syntax = "proto2";
package perfetto.protos;

message CacheEntryExpiredFtraceEvent {
  optional uint64 h = 1;
  optional string name = 2;
}
message CacheEntryMakeNegativeFtraceEvent {
  optional uint64 h = 1;
  optional string name = 2;
}
message CacheEntryNoListenerFtraceEvent {
  optional uint64 h = 1;
  optional string name = 2;
}
message CacheEntryUpcallFtraceEvent {
  optional uint64 h = 1;
  optional string name = 2;
}
message CacheEntryUpdateFtraceEvent {
  optional uint64 h = 1;
  optional string name = 2;
}
message PmapRegisterFtraceEvent {
  optional uint32 program = 1;
  optional uint32 version = 2;
  optional int32 protocol = 3;
  optional uint32 port = 4;
}
message RpcAuthTooweakFtraceEvent {
  optional uint32 task_id = 1;
  optional uint32 client_id = 2;
  optional uint32 xid = 3;
  optional string progname = 4;
  optional uint32 version = 5;
  optional string procname = 6;
  optional string servername = 7;
}
message RpcBadCallhdrFtraceEvent {
  optional uint32 task_id = 1;
  optional uint32 client_id = 2;
}
message RpcBadCredsFtraceEvent {
  optional uint32 task_id = 1;
  optional uint32 client_id = 2;
  optional uint32 xid = 3;
  optional string progname = 4;
  optional uint32 version = 5;
  optional string procname = 6;
  optional string servername = 7;
}
message RpcBadVerifierFtraceEvent {
  optional uint32 task_id = 1;
  optional uint32 client_id = 2;
}
message RpcbBindVersionErrFtraceEvent {
  optional uint32 task_id = 1;
  optional uint32 client_id = 2;
  optional uint32 xid = 3;
  optional string progname = 4;
  optional uint32 version = 5;
  optional string procname = 6;
  optional string servername = 7;
}
message RpcbGetportFtraceEvent {
  optional uint32 task_id = 1;
  optional uint32 client_id = 2;
  optional uint32 program = 3;
  optional uint32 version = 4;
  optional int32 protocol = 5;
  optional uint32 bind_version = 6;
  optional string servername = 7;
}
message RpcbProgUnavailErrFtraceEvent {
  optional uint32 task_id = 1;
  optional uint32 client_id = 2;
  optional uint32 xid = 3;
  optional string progname = 4;
  optional uint32 version = 5;
  optional string procname = 6;
  optional string servername = 7;
}
message RpcbRegisterFtraceEvent {
  optional uint32 program = 1;
  optional uint32 version = 2;
  optional string addr = 3;
  optional string netid = 4;
}
message RpcbSetportFtraceEvent {
  optional uint32 task_id = 1;
  optional uint32 client_id = 2;
  optional int32 status = 3;
  optional uint32 port = 4;
}
message RpcbTimeoutErrFtraceEvent {
  optional uint32 task_id = 1;
  optional uint32 client_id = 2;
  optional uint32 xid = 3;
  optional string progname = 4;
  optional uint32 version = 5;
  optional string procname = 6;
  optional string servername = 7;
}
message RpcBufAllocFtraceEvent {
  optional uint32 task_id = 1;
  optional uint32 client_id = 2;
  optional uint64 callsize = 3;
  optional uint64 recvsize = 4;
  optional int32 status = 5;
}
message RpcbUnreachableErrFtraceEvent {
  optional uint32 task_id = 1;
  optional uint32 client_id = 2;
  optional uint32 xid = 3;
  optional string progname = 4;
  optional uint32 version = 5;
  optional string procname = 6;
  optional string servername = 7;
}
message RpcbUnrecognizedErrFtraceEvent {
  optional uint32 task_id = 1;
  optional uint32 client_id = 2;
  optional uint32 xid = 3;
  optional string progname = 4;
  optional uint32 version = 5;
  optional string procname = 6;
  optional string servername = 7;
}
message RpcbUnregisterFtraceEvent {
  optional uint32 program = 1;
  optional uint32 version = 2;
  optional string netid = 3;
}
message RpcCallRpcerrorFtraceEvent {
  optional uint32 task_id = 1;
  optional uint32 client_id = 2;
  optional int32 tk_status = 3;
  optional int32 rpc_status = 4;
}
message RpcCallStatusFtraceEvent {
  optional uint32 task_id = 1;
  optional uint32 client_id = 2;
  optional int32 status = 3;
}
message RpcClntCloneErrFtraceEvent {
  optional uint32 client_id = 1;
  optional int32 error = 2;
}
message RpcClntFreeFtraceEvent {
  optional uint32 client_id = 1;
}
message RpcClntKillallFtraceEvent {
  optional uint32 client_id = 1;
}
message RpcClntNewFtraceEvent {
  optional uint32 client_id = 1;
  optional string addr = 2;
  optional string port = 3;
  optional string program = 4;
  optional string server = 5;
}
message RpcClntNewErrFtraceEvent {
  optional int32 error = 1;
  optional string program = 2;
  optional string server = 3;
}
message RpcClntReleaseFtraceEvent {
  optional uint32 client_id = 1;
}
message RpcClntReplaceXprtFtraceEvent {
  optional uint32 client_id = 1;
}
message RpcClntReplaceXprtErrFtraceEvent {
  optional uint32 client_id = 1;
}
message RpcClntShutdownFtraceEvent {
  optional uint32 client_id = 1;
}
message RpcConnectStatusFtraceEvent {
  optional uint32 task_id = 1;
  optional uint32 client_id = 2;
  optional int32 status = 3;
}
message RpcGarbageArgsFtraceEvent {
  optional uint32 task_id = 1;
  optional uint32 client_id = 2;
  optional uint32 xid = 3;
  optional string progname = 4;
  optional uint32 version = 5;
  optional string procname = 6;
  optional string servername = 7;
}
message RpcMismatchFtraceEvent {
  optional uint32 task_id = 1;
  optional uint32 client_id = 2;
  optional uint32 xid = 3;
  optional string progname = 4;
  optional uint32 version = 5;
  optional string procname = 6;
  optional string servername = 7;
}
message RpcProcUnavailFtraceEvent {
  optional uint32 task_id = 1;
  optional uint32 client_id = 2;
  optional uint32 xid = 3;
  optional string progname = 4;
  optional uint32 version = 5;
  optional string procname = 6;
  optional string servername = 7;
}
message RpcProgMismatchFtraceEvent {
  optional uint32 task_id = 1;
  optional uint32 client_id = 2;
  optional uint32 xid = 3;
  optional string progname = 4;
  optional uint32 version = 5;
  optional string procname = 6;
  optional string servername = 7;
}
message RpcProgUnavailFtraceEvent {
  optional uint32 task_id = 1;
  optional uint32 client_id = 2;
  optional uint32 xid = 3;
  optional string progname = 4;
  optional uint32 version = 5;
  optional string procname = 6;
  optional string servername = 7;
}
message RpcRefreshStatusFtraceEvent {
  optional uint32 task_id = 1;
  optional uint32 client_id = 2;
  optional int32 status = 3;
}
message RpcRequestFtraceEvent {
  optional uint32 task_id = 1;
  optional uint32 client_id = 2;
  optional int32 version = 3;
  optional uint32 async = 4;
  optional string progname = 5;
  optional string procname = 6;
}
message RpcRetryRefreshStatusFtraceEvent {
  optional uint32 task_id = 1;
  optional uint32 client_id = 2;
  optional int32 status = 3;
}
message RpcSocketCloseFtraceEvent {
  optional uint32 socket_state = 1;
  optional uint32 sock_state = 2;
  optional uint64 ino = 3;
}
message RpcSocketConnectFtraceEvent {
  optional int32 error = 1;
  optional uint32 socket_state = 2;
  optional uint32 sock_state = 3;
  optional uint64 ino = 4;
}
message RpcSocketErrorFtraceEvent {
  optional int32 error = 1;
  optional uint32 socket_state = 2;
  optional uint32 sock_state = 3;
  optional uint64 ino = 4;
}
message RpcSocketNospaceFtraceEvent {
  optional uint32 task_id = 1;
  optional uint32 client_id = 2;
  optional uint32 total = 3;
  optional uint32 remaining = 4;
}
message RpcSocketResetConnectionFtraceEvent {
  optional int32 error = 1;
  optional uint32 socket_state = 2;
  optional uint32 sock_state = 3;
  optional uint64 ino = 4;
}
message RpcSocketShutdownFtraceEvent {
  optional uint32 socket_state = 1;
  optional uint32 sock_state = 2;
  optional uint64 ino = 3;
}
message RpcSocketStateChangeFtraceEvent {
  optional uint32 socket_state = 1;
  optional uint32 sock_state = 2;
  optional uint64 ino = 3;
}
message RpcStaleCredsFtraceEvent {
  optional uint32 task_id = 1;
  optional uint32 client_id = 2;
  optional uint32 xid = 3;
  optional string progname = 4;
  optional uint32 version = 5;
  optional string procname = 6;
  optional string servername = 7;
}
message RpcStatsLatencyFtraceEvent {
  optional uint32 task_id = 1;
  optional uint32 client_id = 2;
  optional uint32 xid = 3;
  optional int32 version = 4;
  optional string progname = 5;
  optional string procname = 6;
  optional uint64 backlog = 7;
  optional uint64 rtt = 8;
  optional uint64 execute = 9;
}
message RpcTaskBeginFtraceEvent {
  optional uint32 task_id = 1;
  optional uint32 client_id = 2;
  optional uint64 action = 3;
  optional uint64 runstate = 4;
  optional int32 status = 5;
  optional uint32 flags = 6;
}
message RpcTaskCallDoneFtraceEvent {
  optional uint32 task_id = 1;
  optional uint32 client_id = 2;
  optional uint64 action = 3;
  optional uint64 runstate = 4;
  optional int32 status = 5;
  optional uint32 flags = 6;
}
message RpcTaskCompleteFtraceEvent {
  optional uint32 task_id = 1;
  optional uint32 client_id = 2;
  optional uint64 action = 3;
  optional uint64 runstate = 4;
  optional int32 status = 5;
  optional uint32 flags = 6;
}
message RpcTaskEndFtraceEvent {
  optional uint32 task_id = 1;
  optional uint32 client_id = 2;
  optional uint64 action = 3;
  optional uint64 runstate = 4;
  optional int32 status = 5;
  optional uint32 flags = 6;
}
message RpcTaskRunActionFtraceEvent {
  optional uint32 task_id = 1;
  optional uint32 client_id = 2;
  optional uint64 action = 3;
  optional uint64 runstate = 4;
  optional int32 status = 5;
  optional uint32 flags = 6;
}
message RpcTaskSignalledFtraceEvent {
  optional uint32 task_id = 1;
  optional uint32 client_id = 2;
  optional uint64 action = 3;
  optional uint64 runstate = 4;
  optional int32 status = 5;
  optional uint32 flags = 6;
}
message RpcTaskSleepFtraceEvent {
  optional uint32 task_id = 1;
  optional uint32 client_id = 2;
  optional uint64 timeout = 3;
  optional uint64 runstate = 4;
  optional int32 status = 5;
  optional uint32 flags = 6;
  optional string q_name = 7;
}
message RpcTaskSyncSleepFtraceEvent {
  optional uint32 task_id = 1;
  optional uint32 client_id = 2;
  optional uint64 action = 3;
  optional uint64 runstate = 4;
  optional int32 status = 5;
  optional uint32 flags = 6;
}
message RpcTaskSyncWakeFtraceEvent {
  optional uint32 task_id = 1;
  optional uint32 client_id = 2;
  optional uint64 action = 3;
  optional uint64 runstate = 4;
  optional int32 status = 5;
  optional uint32 flags = 6;
}
message RpcTaskTimeoutFtraceEvent {
  optional uint32 task_id = 1;
  optional uint32 client_id = 2;
  optional uint64 action = 3;
  optional uint64 runstate = 4;
  optional int32 status = 5;
  optional uint32 flags = 6;
}
message RpcTaskWakeupFtraceEvent {
  optional uint32 task_id = 1;
  optional uint32 client_id = 2;
  optional uint64 timeout = 3;
  optional uint64 runstate = 4;
  optional int32 status = 5;
  optional uint32 flags = 6;
  optional string q_name = 7;
}
message RpcTimeoutStatusFtraceEvent {
  optional uint32 task_id = 1;
  optional uint32 client_id = 2;
  optional int32 status = 3;
}
message RpcUnparsableFtraceEvent {
  optional uint32 task_id = 1;
  optional uint32 client_id = 2;
  optional uint32 xid = 3;
  optional string progname = 4;
  optional uint32 version = 5;
  optional string procname = 6;
  optional string servername = 7;
}
message RpcXdrAlignmentFtraceEvent {
  optional uint32 task_id = 1;
  optional uint32 client_id = 2;
  optional int32 version = 3;
  optional uint64 offset = 4;
  optional uint32 copied = 5;
  optional uint64 head_base = 6;
  optional uint64 head_len = 7;
  optional uint64 tail_base = 8;
  optional uint64 tail_len = 9;
  optional uint32 page_len = 10;
  optional uint32 len = 11;
  optional string progname = 12;
  optional string procedure = 13;
}
message RpcXdrOverflowFtraceEvent {
  optional uint32 task_id = 1;
  optional uint32 client_id = 2;
  optional int32 version = 3;
  optional uint64 requested = 4;
  optional uint64 end = 5;
  optional uint64 p = 6;
  optional uint64 head_base = 7;
  optional uint64 head_len = 8;
  optional uint64 tail_base = 9;
  optional uint64 tail_len = 10;
  optional uint32 page_len = 11;
  optional uint32 len = 12;
  optional string progname = 13;
  optional string procedure = 14;
}
message RpcXdrRecvfromFtraceEvent {
  optional uint32 task_id = 1;
  optional uint32 client_id = 2;
  optional uint64 head_base = 3;
  optional uint64 head_len = 4;
  optional uint64 tail_base = 5;
  optional uint64 tail_len = 6;
  optional uint32 page_base = 7;
  optional uint32 page_len = 8;
  optional uint32 msg_len = 9;
}
message RpcXdrReplyPagesFtraceEvent {
  optional uint32 task_id = 1;
  optional uint32 client_id = 2;
  optional uint64 head_base = 3;
  optional uint64 head_len = 4;
  optional uint64 tail_base = 5;
  optional uint64 tail_len = 6;
  optional uint32 page_base = 7;
  optional uint32 page_len = 8;
  optional uint32 msg_len = 9;
}
message RpcXdrSendtoFtraceEvent {
  optional uint32 task_id = 1;
  optional uint32 client_id = 2;
  optional uint64 head_base = 3;
  optional uint64 head_len = 4;
  optional uint64 tail_base = 5;
  optional uint64 tail_len = 6;
  optional uint32 page_base = 7;
  optional uint32 page_len = 8;
  optional uint32 msg_len = 9;
}
message SvcAllocArgErrFtraceEvent {
  optional uint32 requested = 1;
  optional uint32 allocated = 2;
}
message SvcAuthenticateFtraceEvent {
  optional uint32 server = 1;
  optional uint32 client = 2;
  optional uint32 netns_ino = 3;
  optional uint32 xid = 4;
  optional uint64 svc_status = 5;
  optional uint64 auth_stat = 6;
}
message SvcDeferFtraceEvent {
  optional uint32 server = 1;
  optional uint32 client = 2;
  optional uint32 netns_ino = 3;
  optional uint32 xid = 4;
  optional uint64 flags = 5;
}
message SvcDeferDropFtraceEvent {
  optional uint64 dr = 1;
  optional uint32 xid = 2;
  optional uint32 addr = 3;
}
message SvcDeferQueueFtraceEvent {
  optional uint64 dr = 1;
  optional uint32 xid = 2;
  optional uint32 addr = 3;
}
message SvcDeferRecvFtraceEvent {
  optional uint64 dr = 1;
  optional uint32 xid = 2;
  optional uint32 addr = 3;
}
message SvcDropFtraceEvent {
  optional uint32 server = 1;
  optional uint32 client = 2;
  optional uint32 netns_ino = 3;
  optional uint32 xid = 4;
  optional uint64 flags = 5;
}
message SvcNoregisterFtraceEvent {
  optional uint32 version = 1;
  optional uint64 family = 2;
  optional uint32 protocol = 3;
  optional uint32 port = 4;
  optional int32 error = 5;
  optional string program = 6;
}
message SvcProcessFtraceEvent {
  optional uint32 xid = 1;
  optional uint32 vers = 2;
  optional uint32 proc = 3;
  optional string service = 4;
  optional string procedure = 5;
  optional string addr = 6;
}
message SvcRegisterFtraceEvent {
  optional uint32 version = 1;
  optional uint64 family = 2;
  optional uint32 protocol = 3;
  optional uint32 port = 4;
  optional int32 error = 5;
  optional string program = 6;
}
message SvcSendFtraceEvent {
  optional uint32 server = 1;
  optional uint32 client = 2;
  optional uint32 netns_ino = 3;
  optional uint32 xid = 4;
  optional int32 status = 5;
  optional uint64 flags = 6;
}
message SvcsockAcceptErrFtraceEvent {
  optional int64 status = 1;
  optional string service = 2;
  optional uint32 netns_ino = 3;
}
message SvcsockDataReadyFtraceEvent {
  optional int64 result = 1;
  optional uint64 flags = 2;
  optional string addr = 3;
}
message SvcsockGetpeernameErrFtraceEvent {
  optional int64 status = 1;
  optional string service = 2;
  optional uint32 netns_ino = 3;
}
message SvcsockMarkerFtraceEvent {
  optional uint32 length = 1;
  optional uint32 last = 2;
  optional string addr = 3;
}
message SvcsockNewSocketFtraceEvent {
  optional uint64 type = 1;
  optional uint64 family = 2;
  optional uint32 listener = 3;
}
message SvcsockTcpRecvFtraceEvent {
  optional int64 result = 1;
  optional uint64 flags = 2;
  optional string addr = 3;
}
message SvcsockTcpRecvEagainFtraceEvent {
  optional int64 result = 1;
  optional uint64 flags = 2;
  optional string addr = 3;
}
message SvcsockTcpRecvErrFtraceEvent {
  optional int64 result = 1;
  optional uint64 flags = 2;
  optional string addr = 3;
}
message SvcsockTcpRecvShortFtraceEvent {
  optional uint32 expected = 1;
  optional uint32 received = 2;
  optional uint64 flags = 3;
  optional string addr = 4;
}
message SvcsockTcpSendFtraceEvent {
  optional int64 result = 1;
  optional uint64 flags = 2;
  optional string addr = 3;
}
message SvcsockTcpStateFtraceEvent {
  optional uint64 socket_state = 1;
  optional uint64 sock_state = 2;
  optional uint64 flags = 3;
  optional string addr = 4;
}
message SvcsockUdpRecvFtraceEvent {
  optional int64 result = 1;
  optional uint64 flags = 2;
  optional string addr = 3;
}
message SvcsockUdpRecvErrFtraceEvent {
  optional int64 result = 1;
  optional uint64 flags = 2;
  optional string addr = 3;
}
message SvcsockUdpSendFtraceEvent {
  optional int64 result = 1;
  optional uint64 flags = 2;
  optional string addr = 3;
}
message SvcsockWriteSpaceFtraceEvent {
  optional int64 result = 1;
  optional uint64 flags = 2;
  optional string addr = 3;
}
message SvcStatsLatencyFtraceEvent {
  optional uint32 server = 1;
  optional uint32 client = 2;
  optional uint32 netns_ino = 3;
  optional uint32 xid = 4;
  optional uint64 execute = 5;
  optional string procedure = 6;
}
message SvcUnregisterFtraceEvent {
  optional uint32 version = 1;
  optional int32 error = 2;
  optional string program = 3;
}
message SvcWakeUpFtraceEvent {
  optional int32 pid = 1;
}
message SvcXdrRecvfromFtraceEvent {
  optional uint32 xid = 1;
  optional uint64 head_base = 2;
  optional uint64 head_len = 3;
  optional uint64 tail_base = 4;
  optional uint64 tail_len = 5;
  optional uint32 page_len = 6;
  optional uint32 msg_len = 7;
}
message SvcXdrSendtoFtraceEvent {
  optional uint32 xid = 1;
  optional uint64 head_base = 2;
  optional uint64 head_len = 3;
  optional uint64 tail_base = 4;
  optional uint64 tail_len = 5;
  optional uint32 page_base = 6;
  optional uint32 page_len = 7;
  optional uint32 msg_len = 8;
}
message SvcXprtAcceptFtraceEvent {
  optional uint32 server = 1;
  optional uint32 client = 2;
  optional uint64 flags = 3;
  optional uint32 netns_ino = 4;
  optional string protocol = 5;
  optional string service = 6;
}
message SvcXprtCloseFtraceEvent {
  optional uint32 server = 1;
  optional uint32 client = 2;
  optional uint64 flags = 3;
  optional uint32 netns_ino = 4;
}
message SvcXprtCreateErrFtraceEvent {
  optional int64 error = 1;
  optional string program = 2;
  optional string protocol = 3;
  optional uint32 addr = 4;
}
message SvcXprtDequeueFtraceEvent {
  optional uint32 server = 1;
  optional uint32 client = 2;
  optional uint64 flags = 3;
  optional uint32 netns_ino = 4;
  optional uint64 wakeup = 5;
}
message SvcXprtDetachFtraceEvent {
  optional uint32 server = 1;
  optional uint32 client = 2;
  optional uint64 flags = 3;
  optional uint32 netns_ino = 4;
}
message SvcXprtEnqueueFtraceEvent {
  optional uint32 server = 1;
  optional uint32 client = 2;
  optional uint64 flags = 3;
  optional uint32 netns_ino = 4;
  optional int32 pid = 5;
}
message SvcXprtFreeFtraceEvent {
  optional uint32 server = 1;
  optional uint32 client = 2;
  optional uint64 flags = 3;
  optional uint32 netns_ino = 4;
}
message SvcXprtNoWriteSpaceFtraceEvent {
  optional uint32 server = 1;
  optional uint32 client = 2;
  optional uint64 flags = 3;
  optional uint32 netns_ino = 4;
}
message XprtConnectFtraceEvent {
  optional uint64 state = 1;
  optional string addr = 2;
  optional string port = 3;
}
message XprtCreateFtraceEvent {
  optional uint64 state = 1;
  optional string addr = 2;
  optional string port = 3;
}
message XprtDestroyFtraceEvent {
  optional uint64 state = 1;
  optional string addr = 2;
  optional string port = 3;
}
message XprtDisconnectAutoFtraceEvent {
  optional uint64 state = 1;
  optional string addr = 2;
  optional string port = 3;
}
message XprtDisconnectDoneFtraceEvent {
  optional uint64 state = 1;
  optional string addr = 2;
  optional string port = 3;
}
message XprtDisconnectForceFtraceEvent {
  optional uint64 state = 1;
  optional string addr = 2;
  optional string port = 3;
}
message XprtGetCongFtraceEvent {
  optional uint32 task_id = 1;
  optional uint32 client_id = 2;
  optional uint32 snd_task_id = 3;
  optional uint64 cong = 4;
  optional uint64 cwnd = 5;
  optional uint32 wait = 6;
}
message XprtLookupRqstFtraceEvent {
  optional uint32 xid = 1;
  optional int32 status = 2;
  optional string addr = 3;
  optional string port = 4;
}
message XprtPingFtraceEvent {
  optional int32 status = 1;
  optional string addr = 2;
  optional string port = 3;
}
message XprtPutCongFtraceEvent {
  optional uint32 task_id = 1;
  optional uint32 client_id = 2;
  optional uint32 snd_task_id = 3;
  optional uint64 cong = 4;
  optional uint64 cwnd = 5;
  optional uint32 wait = 6;
}
message XprtReleaseCongFtraceEvent {
  optional uint32 task_id = 1;
  optional uint32 client_id = 2;
  optional uint32 snd_task_id = 3;
  optional uint64 cong = 4;
  optional uint64 cwnd = 5;
  optional uint32 wait = 6;
}
message XprtReleaseXprtFtraceEvent {
  optional uint32 task_id = 1;
  optional uint32 client_id = 2;
  optional uint32 snd_task_id = 3;
}
message XprtReserveFtraceEvent {
  optional uint32 task_id = 1;
  optional uint32 client_id = 2;
  optional uint32 xid = 3;
}
message XprtReserveCongFtraceEvent {
  optional uint32 task_id = 1;
  optional uint32 client_id = 2;
  optional uint32 snd_task_id = 3;
  optional uint64 cong = 4;
  optional uint64 cwnd = 5;
  optional uint32 wait = 6;
}
message XprtReserveXprtFtraceEvent {
  optional uint32 task_id = 1;
  optional uint32 client_id = 2;
  optional uint32 snd_task_id = 3;
}
message XprtRetransmitFtraceEvent {
  optional uint32 task_id = 1;
  optional uint32 client_id = 2;
  optional uint32 xid = 3;
  optional int32 ntrans = 4;
  optional int32 version = 5;
  optional uint64 timeout = 6;
  optional string progname = 7;
  optional string procname = 8;
}
message XprtTimerFtraceEvent {
  optional uint32 xid = 1;
  optional int32 status = 2;
  optional string addr = 3;
  optional string port = 4;
}
message XprtTransmitFtraceEvent {
  optional uint32 task_id = 1;
  optional uint32 client_id = 2;
  optional uint32 xid = 3;
  optional uint32 seqno = 4;
  optional int32 status = 5;
}
message XsDataReadyFtraceEvent {
  optional string addr = 1;
  optional string port = 2;
}
message XsStreamReadDataFtraceEvent {
  optional int64 err = 1;
  optional uint64 total = 2;
  optional string addr = 3;
  optional string port = 4;
}
message XsStreamReadRequestFtraceEvent {
  optional string addr = 1;
  optional string port = 2;
  optional uint32 xid = 3;
  optional uint64 copied = 4;
  optional uint32 reclen = 5;
  optional uint32 offset = 6;
}
